{"version":3,"sources":["models/test/difficulty.ts","services/persistenceService.ts","api/helpers/getBaseUrl.ts","api/auth/index.ts","redux/auth/actions.ts","redux/dashboard/dashboardSlice.ts","redux/auth/authSlice.ts","api/test/index.ts","redux/test/actions.ts","redux/test/testSlice.ts","redux/store.ts","redux/hooks.ts","routers/PrivateRoute.tsx","routers/PublicRoute.tsx","components/alert/Alert.tsx","components/alert/AuthAlert.tsx","components/alert/DashboardAlert.tsx","components/formik/FormikField.tsx","components/dialog/Dialog.tsx","helpers/login/initialValues.ts","helpers/common/emailSchema.ts","helpers/common/passwordSchema.ts","helpers/login/loginSchema.ts","components/reset-password/ResetPasswordForm.tsx","screens/auth/LoginScreen.tsx","helpers/register/initialValues.ts","helpers/register/registerSchema.ts","components/resend-confirmation-email/ResendConfirmationEmailForm.tsx","screens/auth/RegisterScreen.tsx","screens/auth/ConfirmEmailScreen.tsx","helpers/change-password/changePasswordSchema.ts","helpers/change-password/initialValues.ts","screens/auth/ChangePasswordScreen.tsx","helpers/difficulty/index.ts","models/test/testType.ts","helpers/testType/index.ts","components/stats/NewWordsLearnt.tsx","components/test/CardTest.tsx","components/home/Filter.tsx","screens/HomeScreen.tsx","components/change-email/ChangeEmailForm.tsx","components/delete-my-account/DeleteMyAccountForm.tsx","screens/user/ProfileScreen.tsx","api/stats/index.ts","components/stats/BestStreak.tsx","components/stats/CurrentStreak.tsx","components/stats/PercentLearnt.tsx","helpers/test/AnswerType.ts","components/stats/SuccessRate.tsx","components/stats/UseOfTheApp.tsx","screens/stats/StatsScreen.tsx","components/formik/FormikSelect.tsx","helpers/create-test/initialValues.ts","helpers/create-test/testSchema.ts","screens/test/create/TestCreateScreen.tsx","helpers/test/fetchVideoAndSet.ts","helpers/test/answerToLabel.ts","helpers/test/typeToColor.ts","components/test/VideoAnswer.tsx","helpers/test/typeToRadioColor.ts","components/test/QuestionOptionWordToVideo.tsx","helpers/test/computeType.ts","components/test/QuestionOptionVideoToWord.tsx","components/test/QuestionMimic.tsx","components/test/QuestionQA.tsx","components/test/ResultsModal.tsx","helpers/test/getNumberOfCorrectAnswersFromTest.ts","components/test/NavButtons.tsx","components/test/Test.tsx","screens/test/do/TestDoScreen.tsx","screens/test/review/TestReviewScreen.tsx","screens/NotFoundScreen.tsx","routers/AuthRoutes.tsx","components/nav/BottomBarNav.tsx","components/appbar/AppBar.tsx","routers/DashboardRoutes.tsx","routers/AppRouter.tsx","LearnASLApp.tsx","index.tsx"],"names":["Difficulty","PersistenceService","key","stored","sessionStorage","getItem","JSON","parse","error","value","setItem","stringify","clear","removeItem","getBaseUrl","process","REACT_APP_BASE_URL","baseURL","baseEndpoint","getToken","get","token","loginAsync","email","password","a","fetch","method","headers","body","registerAsync","startPasswordRecoveryAsync","startEmailConfirmationAsync","changeEmailAsync","Authorization","createAsyncThunk","login","thunkApi","AuthApi","then","res","json","data","status","rejectWithValue","errors","set","register","resendConfirmationEmailAsync","confirmEmailAsync","confirmEmail","startChangePasswordAsync","changePasswordAsync","changePassword","dispatch","thunkLogout","deleteMyAccountAsync","_","dashboardSlice","createSlice","name","initialState","messages","info","success","reducers","setErrors","state","action","payload","setInfoMessages","setSuccessMessages","clearMessages","clearErrors","clearError","filter","er","clearInfoMessage","me","clearSuccessMessage","clearAll","actions","invalidUser","id","undefined","user","authSlice","logout","extraReducers","builder","addCase","AuthActions","pending","fulfilled","rejected","baseQuestionEndpoint","setToUrlSearchParamsIfDefined","params","getTests","abortController","URLSearchParams","pageNumber","toString","pageSize","testType","difficulty","toDate","fromDate","testQueryFilterToUrlSearchParams","signal","getTest","populated","replyToQuestion","userAnswer","videoUser","formdata","FormData","append","deleteAllTests","getTestAsync","testGet","persistenceService","delete","TestApi","ok","test","page","totalTests","filters","recent","currentTest","testSlice","setRecentPageSize","setRecentPageNumber","setRecentFilter","setTotalTests","deleteCurrentTest","setPage","setCurrentTest","TestActions","thunkDeleteCurrentTest","thunkSetCurrentTest","currentTestInPersistence","store","configureStore","reducer","auth","authReducer","testReducer","dashboard","dashboardReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","PrivateRoute","children","to","PublicRoute","MuiAlertRef","forwardRef","props","ref","elevation","variant","Alert","type","message","position","onClose","handleClose","event","reason","fn","Snackbar","open","autoHideDuration","anchorOrigin","severity","sx","width","AuthAlert","DashboardAlert","FormikField","label","required","touched","errorText","rest","useState","showPassword","setShowPassword","as","TextField","autoComplete","helperText","InputProps","startAdornment","InputAdornment","IconButton","onClick","onMouseDown","preventDefault","edge","Dialog","color","messageButton","title","content","component","setOpen","Button","DialogTitle","DialogContent","DialogContentText","marginBottom","initialValues","emailSchema","Yup","passwordSchema","max","min","matches","loginSchema","shape","resetPasswordSchema","ResetPasswordForm","onSubmit","values","validationSchema","validateOnChange","isValid","dirty","DialogActions","disabled","LoginScreen","Container","Box","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","Typography","mt","maxWidth","margin","fullWidth","LoadingButton","loading","mb","Grid","container","item","xs","repeatPassword","registerSchema","oneOf","resendConfirmationEmailSchema","ResendConfirmationEmailForm","RegisterScreen","validateOnMount","ConfirmEmailScreen","useParams","useEffect","spacing","direction","justifyContent","style","minHeight","CircularProgress","replace","changePasswordSchema","ChangePasswordScreen","TestType","difficultyToColor","EASY","MEDIUM","HARD","FilterType","testTypeToString","Mimic","Mimic_Error","QA","QA_Error","OptionVideoToWord","OptionVideoToWord_Error","OptionWordToVideo","OptionWordToVideo_Error","CardTest","navigate","useNavigate","Card","minWidth","CardActionArea","CardContent","gutterBottom","Chip","questions","length","Date","createdOn","toLocaleDateString","toLocaleTimeString","hour","minute","Filter","onChange","showFilter","setShowFilter","checked","setChecked","startDate","endDate","selectionRange","setSelectionRange","el","document","getElementsByClassName","toUTCString","useDateFiltering","Accordion","expanded","ev","AccordionSummary","expandIcon","AccordionDetails","flexWrap","FormControl","InputLabel","Select","child","newValue","target","MenuItem","FormControlLabel","control","Checkbox","inputProps","maxDate","ranges","selection","HomeScreen","recentTests","setRecentTests","isLoaded","setIsLoaded","useCallback","userId","handleChangeFilter","updatedFilter","AbortController","fetchAndSet","result","pagination","TotalCount","catch","aborted","abort","TablePagination","count","onPageChange","e","newPage","rowsPerPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","map","t","Array","from","index","Skeleton","animation","height","repeatedEmail","changeEmailSchema","ChangeEmailForm","getState","finally","startIcon","DeleteMyAccountForm","ProfileScreen","loadingDeleteTests","setLoadingDeleteTests","deleteTestsCallback","Divider","deleteTests","Error","size","getUseOfTheApp","year","month","getBestStreak","getCurrentStreak","getNumberOfLearntWords","day","getPercentLearnt","getSuccessRate","query","NOTDEFINED","BestStreak","stat","setStat","isLoading","setIsLoading","getStat","StatsApi","response","fetchStat","Paper","padding","CurrentStreak","NewWordsLearnt","getFullYear","apiFilter","setApiFilter","FormLabel","RadioGroup","newApiFilter","getMonth","getDate","Radio","getGreenToRed","percent","Math","floor","AnswerType","PercentLearnt","round","totalValue","lineWidth","dataEntry","percentage","labelStyle","fontSize","fontFamily","fill","labelPosition","SuccessRate","temporal","radius","UseOfTheApp","queryFilter","setQueryFilter","onActiveStartDateChange","view","date","activeStartDate","tileClassName","includes","StatsScreen","md","columns","sm","MaterialUISelectField","hasError","onBlur","FormHelperText","FormikSelect","items","numberOfQuestions","testSchema","testTypes","Object","entries","difficulties","d","difficultyToString","TestCreateScreen","guid","step","fetchVideoAndSet","url","blob","current","src","URL","createObjectURL","answerToLabel","allAnswers","answer","indexOf","typeToColor","ERROR","SUCCESS","DEFAULT","VideoAnswer","handleOnChange","refAnswer","isOutlined","cardColor","radioColor","typeToRadioColor","border","borderColor","controls","QuestionOptionWordToVideo","setCurrentAnswer","question","editable","useMemo","possibleAnswer0","possibleAnswer1","possibleAnswer2","possibleAnswer3","setValue","refPossibleAnswer0","useRef","refPossibleAnswer1","refPossibleAnswer2","refPossibleAnswer3","handleComputeType","answerLabel","correctAnswer","userLabel","computeType","alignSelf","wordToGuess","QuestionOptionVideoToWord","refVideo","videoToGuess","getColor","baseOptions","constraints","audio","video","timeLimit","recordOptions","isOnInitially","isFlipped","uploadOptions","useVideoInput","QuestionMimic","option","setOption","refVideoHelp","refVideoUser","refVideoRecorder","videoHelp","onRecordingComplete","videoBlob","file","File","handleStopReplaying","ToggleButtonGroup","exclusive","ToggleButton","isCorrect","QuestionQA","top","left","transform","boxShadow","p","ResultsModal","total","correct","q","possibleAnswers","getNumberOfCorrectAnswersFromTest","incorrect","Modal","toFixed","NavButtons","handleOnPageChange","testLength","handleStop","handleFinish","TestComponent","currentAnswer","refTitle","setRefTitle","refInfo","setRefInfo","handleRefTitle","node","handleRefInfo","titleWidth","offsetWidth","currentInPersistence","createAnswer","sendReply","goToPage","persistence","testInPersistence","err","Pagination","renderItem","PaginationItem","renderQuestion","TestDoScreen","TestReviewScreen","NotFoundScreen","AuthRoutes","path","element","horizontal","vertical","suc","BottomBarNav","BottomNavigation","showLabels","BottomNavigationAction","Link","icon","AppBar","isGoBackVisible","anchorElUser","setAnchorElUser","Toolbar","disableGutters","mr","noWrap","flexGrow","Tooltip","currentTarget","charAt","toLocaleUpperCase","Menu","anchorEl","keepMounted","transformOrigin","Boolean","ListItemIcon","ListItemText","routesWithoutBottomBar","DashboardRoutes","location","useLocation","pathname","window","isBottomBarVisible","setIsBottomBarVisible","setIsGoBackVisible","isRouteWithoutBottomBar","forEach","route","match","pb","CssBaseline","bottom","right","AppRouter","theme","createTheme","LearnASLApp","ThemeProvider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8b19ef8e.chunk.js","sourcesContent":["\nexport enum Difficulty {\n    NOTDEFINED = \"NOT_DEFINED\",\n    EASY = 'EASY', \n    MEDIUM = 'MEDIUM',\n    HARD = 'HARD'\n}","\nexport class PersistenceService {\n    get(key : string) : any {\n        try {\n            const stored = sessionStorage.getItem(key)\n            if (!stored) {\n                return undefined\n            }\n            return JSON.parse(stored)\n        } catch (error) {\n            return undefined\n        }\n    }\n\n    set(key : string, value : any) {\n        try {\n            sessionStorage.setItem(key, JSON.stringify(value))\n        } catch (error) {\n            \n        }\n    }\n\n    clear() {\n        try {\n            sessionStorage.clear()\n        }\n        catch (error) {}\n    }\n\n    delete(key : string) {\n        try {\n            sessionStorage.removeItem(key)\n        } catch (error) {}\n    }\n}","\nconst getBaseUrl = () : string | undefined => {\n    return process.env.REACT_APP_BASE_URL\n}\n\nexport default getBaseUrl","import { PersistenceService } from '../../services/persistenceService'\nimport getBaseUrl from '../helpers/getBaseUrl'\n\nconst baseURL = getBaseUrl()\nconst baseEndpoint = `${baseURL}/auth`\n\nconst getToken = () => {\n    return new PersistenceService().get('user')?.token\n} \n\nconst loginAsync = async (email : string, password : string) => {\n    return fetch(`${baseEndpoint}/login`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            email, password\n        })\n    })\n}\n\nconst registerAsync = async (email: string, password : string) => {\n    return fetch(`${baseEndpoint}/register`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            email, password\n        })\n    })\n}\n\nconst startPasswordRecoveryAsync = (email : string) => {\n    return fetch(`${baseEndpoint}/password-recovery/start?email=${email}`, {\n        method: 'PUT'\n    })\n}\n\nconst startEmailConfirmationAsync = (email : string) => {\n    return fetch(`${baseEndpoint}/email-confirmation/start?email=${email}`, {\n        method: 'PUT'\n    })\n}\n\nconst recoverPasswordAsync = (token : string, email : string, password : string) => {\n    return fetch(`${baseEndpoint}/password-recovery?token=${token}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            email, password\n        })\n    })\n}\n\nconst confirmEmailAsync = (email : string, token : string) => {\n    return fetch(`${baseEndpoint}/email-confirmation?email=${email}&token=${token}`, {\n        method: 'PUT'\n    })\n}\n\nconst changeEmailAsync = (email : string) => {\n    return fetch(`${baseEndpoint}`, {\n        method: 'PUT',\n        headers: {\n            Authorization: `Bearer ${getToken()}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email })\n    })\n}\n\nconst deleteMyAccountAsync = () => {\n    return fetch(`${baseEndpoint}/delete`, {\n        method: 'DELETE',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nexport {\n    loginAsync,\n    registerAsync,\n    startPasswordRecoveryAsync,\n    startEmailConfirmationAsync,\n    recoverPasswordAsync,\n    confirmEmailAsync,\n    changeEmailAsync,\n    deleteMyAccountAsync\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport * as AuthApi from '../../api/auth'\nimport { LoginResponse, RegisterResponse } from '../../models/responses'\nimport { Login, Register, ConfirmEmail, ChangePassword } from '../../models/auth'\nimport { ErrorResponse } from '../../models/responses/error'\nimport { PersistenceService } from '../../services/persistenceService'\nimport { thunkLogout } from './authSlice'\n\nconst loginAsync = createAsyncThunk<\n    LoginResponse, \n    Login, \n    {\n        rejectValue: ErrorResponse\n    }>('auth/login', async(login, thunkApi) => {\n        return await AuthApi.loginAsync(login.email, login.password)\n            .then(async res => {\n                const data = await res.json()\n                if (res.status < 200 || res.status >= 300)\n                {\n                    return thunkApi.rejectWithValue({\n                        errors: data.errors\n                    } as ErrorResponse) \n                }\n\n                const persistenceService = new PersistenceService()\n                persistenceService.set('user', data)\n\n                return {\n                    data\n                } as LoginResponse\n            }) \n    }\n)\n\nconst registerAsync = createAsyncThunk<\n    RegisterResponse, \n    Register, \n    {\n        rejectValue: ErrorResponse\n    }>('auth/register', async(register, thunkApi) => {\n        return await AuthApi.registerAsync(register.email, register.password)\n            .then(async res => {\n                const data = await res.json()\n                if (res.status < 200 || res.status >= 300)\n                {\n                    return thunkApi.rejectWithValue({\n                        errors: data.errors\n                    } as ErrorResponse) \n                }\n\n                return {\n                    data\n                } as RegisterResponse\n            })\n    }\n)\n\nconst resendConfirmationEmailAsync = createAsyncThunk<\n    void, \n    string, \n    {\n        rejectValue: ErrorResponse\n    }>('auth/resend-confirmation-email', async(email, thunkApi) => {\n        return await AuthApi.startEmailConfirmationAsync(email)\n            .then(async res => {\n                const data = await res.json()\n                if (res.status < 200 || res.status >= 300)\n                {\n                    return thunkApi.rejectWithValue({\n                        errors: data.errors\n                    } as ErrorResponse) \n                }\n            })\n    }\n)\n\nconst confirmEmailAsync = createAsyncThunk<\n    void, \n    ConfirmEmail,\n    {\n        rejectValue: ErrorResponse\n    }>('auth/confirm-email', async(confirmEmail, thunkApi) => {\n        return await AuthApi.confirmEmailAsync(confirmEmail.email, confirmEmail.token)\n        .then(async res => {\n            const data = await res.json()\n            if (res.status < 200 || res.status >= 300)\n            {\n                return thunkApi.rejectWithValue({\n                    errors: data.errors\n                } as ErrorResponse) \n            }\n        })\n    }\n)\n\nconst startChangePasswordAsync = createAsyncThunk<\n    void,\n    string,\n    {\n        rejectValue: ErrorResponse\n    }>('auth/start-change-password', async(email, thunkApi) => {\n        return await AuthApi.startPasswordRecoveryAsync(email)\n        .then(async res => {\n            const data = await res.json()\n            if (res.status < 200 || res.status >= 300)\n            {\n                return thunkApi.rejectWithValue({\n                    errors: data.errors\n                } as ErrorResponse) \n            }\n        })\n    }\n)\n\nconst changePasswordAsync = createAsyncThunk<\n    void,\n    ChangePassword,\n    {\n        rejectValue: ErrorResponse\n    }>('auth/change-password', async(changePassword, thunkApi) => {\n        return await AuthApi.recoverPasswordAsync(\n            changePassword.token, \n            changePassword.email,\n            changePassword.password ?? ''\n        ).then(async res => {\n            const data = await res.json()\n            if (res.status < 200 || res.status >= 300)\n            {\n                return thunkApi.rejectWithValue({\n                    errors: data.errors\n                } as ErrorResponse) \n            }\n        })\n    }\n)\n\nconst changeEmailAsync = createAsyncThunk<\n    void,\n    string,\n    {\n        rejectValue: ErrorResponse\n    }>('auth/change-email', async(email, thunkApi) => {\n        return await AuthApi.changeEmailAsync(email).then(async res => {\n            const data = await res.json()\n            if (res.status < 200 || res.status >= 300)\n            {\n                return thunkApi.rejectWithValue({\n                    errors: data.errors\n                } as ErrorResponse) \n            }\n\n            thunkApi.dispatch(thunkLogout())\n        })\n    }\n)\n\nconst deleteMyAccountAsync = createAsyncThunk<\n    void,\n    void,\n    {\n        rejectValue: ErrorResponse\n    }>('auth/delete-my-account', async(_, thunkApi) => {\n        return await AuthApi.deleteMyAccountAsync().then(async res => {\n            const data = await res.json()\n            if (res.status < 200 || res.status >= 300)\n            {\n                return thunkApi.rejectWithValue({\n                    errors: data.errors\n                } as ErrorResponse) \n            }\n\n            thunkApi.dispatch(thunkLogout())\n        })\n    }\n)\n\nexport {\n    loginAsync,\n    registerAsync,\n    resendConfirmationEmailAsync,\n    confirmEmailAsync,\n    startChangePasswordAsync,\n    changePasswordAsync,\n    changeEmailAsync,\n    deleteMyAccountAsync\n}","import { createSlice } from '@reduxjs/toolkit'\n\nexport interface DashboardState {\n  errors: string[],\n  messages: {\n    info: string[]\n    success: string[]\n  }\n}\n\nexport const initialState: DashboardState = {\n  errors: [],\n  messages: {\n    info: [],\n    success: []\n  }\n}\n\nexport const dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    setErrors: (state, action) => {\n      state.errors = action.payload\n    },\n    setInfoMessages: (state, action) => {\n      state.messages.info = action.payload\n    },\n    setSuccessMessages: (state, action) => {\n      state.messages.success = action.payload\n    },\n    clearMessages: state => {\n      state.messages = { info: [], success: [] }\n    },\n    clearErrors: state => {\n      state.errors = []\n    },\n    clearError: (state, action) => {\n      state.errors = state.errors.filter(er => er !== action.payload)\n    },\n    clearInfoMessage: (state, action) => {\n      state.messages.info = state.messages.info.filter(me => me !== action.payload)\n    },\n    clearSuccessMessage: (state, action) => {\n      state.messages.success = state.messages.success.filter(me => me !== action.payload)\n    },\n    clearAll: (state) => {\n      state.errors = []\n      state.messages.info = []\n      state.messages.success = []\n    }\n  }\n})\n\nexport const {\n  clearAll,\n  clearErrors, \n  clearMessages,\n  clearError,\n  clearInfoMessage,\n  clearSuccessMessage,\n  setErrors,\n  setInfoMessages,\n  setSuccessMessages\n} = dashboardSlice.actions\nexport default dashboardSlice.reducer","import { AnyAction, createSlice, ThunkAction } from '@reduxjs/toolkit'\nimport { User } from '../../models/auth'\nimport * as AuthActions from './actions'\nimport { PersistenceService } from '../../services/persistenceService'\nimport { dashboardSlice } from '../dashboard/dashboardSlice'\n\nexport interface AuthState {\n  user: User,\n  status: 'idle' | 'loading' | 'failed',\n  errors: string[],\n  messages: {\n    info: string[]\n    success: string[]\n  }\n}\n\nconst invalidUser : User = {\n    email: '',\n    id: '',\n    token: undefined\n}\n\nexport const initialState: AuthState = {\n  user: new PersistenceService().get('user') ?? invalidUser,\n  status: 'idle',\n  errors: [],\n  messages: {\n    info: [],\n    success: []\n  }\n}\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.user = invalidUser\n      state.status = 'idle'\n    },\n    clearMessages: state => {\n      state.messages = { info: [], success: [] }\n      state.status = 'idle'\n    },\n    clearErrors: state => {\n      state.errors = []\n      state.status = 'idle'\n    },\n    clearError: (state, action) => {\n      state.errors = state.errors.filter(er => er !== action.payload)\n      state.status = 'idle'\n    },\n    clearInfoMessage: (state, action) => {\n      state.messages.info = state.messages.info.filter(me => me !== action.payload)\n      state.status = 'idle'\n    },\n    clearSuccessMessage: (state, action) => {\n      state.messages.success = state.messages.success.filter(me => me !== action.payload)\n      state.status = 'idle'\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // Login\n      .addCase(AuthActions.loginAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(AuthActions.loginAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.user = {\n            email: action.payload.data.email,\n            token: action.payload.data.token,\n            id: action.payload.data.id\n        }\n        state.errors = []\n      })\n      .addCase(AuthActions.loginAsync.rejected, (state, action) => {\n        state.status = 'failed'\n        state.user = invalidUser\n        state.errors = (action.payload) ? action.payload.errors : ['Something went wrong']\n      })\n\n      //Register\n      .addCase(AuthActions.registerAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(AuthActions.registerAsync.fulfilled, (state) => {\n        state.status = 'idle'\n        state.messages.info = ['Review your mail box to confirm your registration']\n      })\n      .addCase(AuthActions.registerAsync.rejected, (state, action) => {\n        state.status = 'failed'\n        state.user = invalidUser\n        state.errors = (action.payload) ? action.payload.errors : ['Something went wrong']\n      })\n\n      // Confirm email - start\n      .addCase(AuthActions.resendConfirmationEmailAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(AuthActions.resendConfirmationEmailAsync.fulfilled, (state) => {\n        state.status = 'idle'\n        state.messages.info = ['Review your mail box to confirm your registration']\n      })\n      .addCase(AuthActions.resendConfirmationEmailAsync.rejected, (state, action) => {\n        state.status = 'failed'\n        state.errors = (action.payload) ? action.payload.errors : ['Something went wrong']\n      })\n\n      // Confirm email\n      .addCase(AuthActions.confirmEmailAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(AuthActions.confirmEmailAsync.fulfilled, (state) => {\n        state.status = 'idle'\n        state.messages.success = ['Email confirmed. You can now sign in the application']\n      })\n      .addCase(AuthActions.confirmEmailAsync.rejected, (state, action) => {\n        state.status = 'failed'\n        state.errors = (action.payload) ? action.payload.errors : ['Something went wrong']\n      })\n\n      // Change password - start\n      .addCase(AuthActions.startChangePasswordAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(AuthActions.startChangePasswordAsync.fulfilled, (state) => {\n        state.status = 'idle'\n        state.messages.info = ['Review your mail box to recover your password']\n      })\n      .addCase(AuthActions.startChangePasswordAsync.rejected, (state, action) => {\n        state.status = 'failed'\n        state.errors = (action.payload) ? action.payload.errors : ['Something went wrong']\n      })\n\n      // Change password\n      .addCase(AuthActions.changePasswordAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(AuthActions.changePasswordAsync.fulfilled, (state) => {\n        state.status = 'idle'\n        state.messages.success = ['Password was changed successfully']\n      })\n      .addCase(AuthActions.changePasswordAsync.rejected, (state, action) => {\n        state.status = 'failed'\n        state.errors = (action.payload) ? action.payload.errors : ['Something went wrong']\n      })\n\n      // Change email\n      .addCase(AuthActions.changeEmailAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(AuthActions.changeEmailAsync.fulfilled, (state) => {\n        state.status = 'idle'\n        state.messages.success = ['Email was changed successfully, check your inbox']\n      })\n      .addCase(AuthActions.changeEmailAsync.rejected, (state, action) => {\n        state.status = 'failed'\n        state.errors = (action.payload) ? action.payload.errors : ['Something went wrong']\n      })\n      \n      // Delete my account\n      .addCase(AuthActions.deleteMyAccountAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(AuthActions.deleteMyAccountAsync.fulfilled, (state) => {\n        state.status = 'idle'\n        state.messages.success = ['We hope to see you again']\n      })\n      .addCase(AuthActions.deleteMyAccountAsync.rejected, (state, action) => {\n        state.status = 'failed'\n        state.errors = (action.payload) ? action.payload.errors : ['Something went wrong']\n      })\n  }\n})\n\nexport const thunkChangeEmail = (email : string): ThunkAction<void, unknown, unknown, AnyAction> => {\n  return (dispatch, getState) => {\n    dispatch(AuthActions.changeEmailAsync(email))\n      .finally(() => {\n        const state : any = getState()\n        dispatch(dashboardSlice.actions.setErrors(state.auth?.errors))\n      })\n  }\n}\n\nexport const thunkDeleteMyAccount = (): ThunkAction<void, unknown, unknown, AnyAction> => {\n  return (dispatch, getState) => {\n    dispatch(AuthActions.deleteMyAccountAsync())\n      .finally(() => {\n        const state : any = getState()\n        dispatch(dashboardSlice.actions.setErrors(state.auth?.errors))\n      })\n  }\n}\n\nexport const thunkLogout = (): ThunkAction<void, unknown, unknown, AnyAction> => {\n  return dispatch => {\n    new PersistenceService().clear()\n    dispatch(authSlice.actions.logout())\n    dispatch(dashboardSlice.actions.clearAll())\n  }\n}\n\nexport const {  \n  clearErrors, \n  clearMessages,\n  clearError,\n  clearInfoMessage,\n  clearSuccessMessage\n} = authSlice.actions\nexport default authSlice.reducer","import getBaseUrl from '../helpers/getBaseUrl'\nimport { TestQueryFilter } from '../../models/queryFilters/'\nimport { PersistenceService } from '../../services/persistenceService'\nimport { TestCreate, TestGet, TestReply } from '../../models/test'\n\nconst baseURL = getBaseUrl()\nconst getToken = () => {\n    return new PersistenceService().get('user')?.token\n} \nconst baseEndpoint = `${baseURL}/test`\nconst baseQuestionEndpoint = `${baseURL}/question`\n\nconst setToUrlSearchParamsIfDefined = (params: URLSearchParams, key: string, value: string | undefined) => {\n    if (value === undefined) return;\n\n    params.set(key, value)\n}\n\nconst testQueryFilterToUrlSearchParams = (filter: TestQueryFilter) : URLSearchParams => {\n    const params = new URLSearchParams()\n\n    setToUrlSearchParamsIfDefined(params, 'PageNumber', filter.pageNumber.toString())\n    setToUrlSearchParamsIfDefined(params, 'PageSize', filter.pageSize.toString())\n    setToUrlSearchParamsIfDefined(params, 'TestType', filter.testType?.toString())\n    setToUrlSearchParamsIfDefined(params, 'Difficulty', filter.difficulty?.toString())\n    setToUrlSearchParamsIfDefined(params, 'ToDate', filter.toDate?.toString())\n    setToUrlSearchParamsIfDefined(params, 'FromDate', filter.fromDate?.toString())\n\n    return params\n}\n\nconst getTests = (filter : TestQueryFilter, abortController: AbortController) => {\n    const params = testQueryFilterToUrlSearchParams(filter)\n\n    return fetch(`${baseEndpoint}?${params.toString()}`, {\n        signal: abortController.signal,\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nconst createTest = (test: TestCreate) => {\n    return fetch(`${baseEndpoint}?NumberOfQuestions=${test.numberOfQuestions.toString()}&TestType=${test.testType}&Difficulty=${test.difficulty}`, {\n        method: 'POST',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nconst getTest = ({id, populated} : TestGet) => {\n    return fetch(`${baseEndpoint}/${id}?populated=${populated}`, {\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nconst replyToQuestion = ({id, testType, userAnswer, videoUser} : TestReply) => {\n    const formdata = new FormData()\n\n    videoUser && formdata.append('VideoUser', videoUser)\n    userAnswer && formdata.append('UserAnswer', userAnswer)\n    formdata.append('TestType', testType)\n\n    const params = {\n        method: 'PUT',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        },\n        body: formdata\n    }\n\n    return fetch(`${baseQuestionEndpoint}/${id}`, params)\n}\n\nconst deleteAllTests = (abortController: AbortController) => {\n    return fetch(`${baseEndpoint}`, {\n        signal: abortController.signal,\n        method: 'DELETE',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nexport {\n    getTest,\n    getTests,\n    createTest,\n    replyToQuestion,\n    deleteAllTests\n}","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport * as TestApi from '../../api/test'\nimport { ErrorResponse, TestResponse } from '../../models/responses'\nimport { PersistenceService } from '../../services/persistenceService'\nimport { TestGet } from '../../models/test/testGet';\n\nconst getTestAsync = createAsyncThunk<\n    TestResponse, \n    TestGet, \n    {\n        rejectValue: ErrorResponse\n    }>('test/getTest', async(testGet, thunkApi) => {\n        const persistenceService = new PersistenceService()\n        persistenceService.delete('currentTest')\n        const res = await TestApi.getTest(testGet)\n\n        if (!res.ok)\n        {\n            let errors = []\n\n            // Auth error\n            if (res.status === 401)\n                errors = ['Your session has expired. Please login again']\n            // Other error\n            else {\n                errors = ['Something went wrong']\n            }\n            \n            return thunkApi.rejectWithValue({\n                errors\n            } as ErrorResponse) \n        }\n\n        const data = await res.json()\n        persistenceService.set('currentTest', {\n            test: data,\n            page: 1,\n            state: 'success'\n        })\n\n        return {\n            data\n        } as TestResponse\n    }\n)\n\nexport {\n    getTestAsync\n}","import { createSlice, ThunkAction, AnyAction } from '@reduxjs/toolkit';\nimport { Difficulty, Test, TestType } from '../../models/test'\nimport * as TestActions from './actions'\nimport { PersistenceService } from '../../services/persistenceService';\n\ninterface Filter {\n  pageSize: number,\n  pageNumber: number,\n  type?: TestType,\n  difficulty?: Difficulty,\n  fromDate?: string,\n  toDate?: string\n}\n\nexport interface TestState {\n  totalTests: number,\n  filters: {\n    recent: Filter\n  },\n  currentTest: {\n    state: 'loading' | 'error' | 'idle' | 'success',\n    test?: Test,\n    errors: string[],\n    page: number\n  }\n}\n\nexport const initialState: TestState = {\n  totalTests: 10,\n  filters: {\n    recent: {\n      pageSize: 10,\n      pageNumber: 0\n    }\n  },\n  currentTest: {\n    ...new PersistenceService().get('currentTest'),\n    errors: []\n  } ?? {\n    state: 'idle',\n    errors: [],\n    page: 1\n  }\n}\n\nexport const testSlice = createSlice({\n  name: 'test',\n  initialState,\n  reducers: {\n    setRecentPageSize: (state, action) => {\n      state.filters.recent.pageSize = action.payload\n    },\n    setRecentPageNumber: (state, action) => {\n      state.filters.recent.pageNumber = action.payload\n    },\n    setRecentFilter: (state, action) => {\n      state.filters.recent = action.payload\n    },\n    setTotalTests: (state, action) => {\n      state.totalTests = action.payload\n    },\n    deleteCurrentTest: (state) => {\n      state.currentTest.state = 'idle'\n      state.currentTest.test = undefined\n      state.currentTest.errors = []\n      state.currentTest.page = 1\n    },\n    setPage: (state, action) => {\n      state.currentTest.page = action.payload\n    },\n    setCurrentTest: (state, action) => {\n      state.currentTest.test = action.payload\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // Get test\n      .addCase(TestActions.getTestAsync.pending, (state) => {\n        state.currentTest.state = 'loading'\n        state.currentTest.errors = []\n        state.currentTest.test = undefined\n      })\n      .addCase(TestActions.getTestAsync.fulfilled, (state, action) => {\n        state.currentTest.state = 'success'\n        state.currentTest.test = action.payload.data\n        state.currentTest.errors = []\n      })\n      .addCase(TestActions.getTestAsync.rejected, (state, action) => {\n        state.currentTest.state = 'error'\n        state.currentTest.errors =  (action.payload) ? action.payload.errors : ['Something went wrong']\n        state.currentTest.test = undefined\n      })\n  }\n})\n\nexport const thunkSetPage = (pageNumber: number): ThunkAction<void, unknown, unknown, AnyAction> => {\n  return dispatch => {\n    const persistenceService = new PersistenceService()\n    const currentTest = persistenceService.get('currentTest')\n    persistenceService.set('currentTest', {\n      ...currentTest,\n      page: pageNumber\n    })\n    dispatch(testSlice.actions.setPage(pageNumber))\n  }\n}\n\nexport const thunkDeleteCurrentTest = (): ThunkAction<void, unknown, unknown, AnyAction> => {\n  return dispatch => {\n    const persistenceService = new PersistenceService()\n    persistenceService.delete('currentTest')\n    dispatch(testSlice.actions.deleteCurrentTest())\n  }\n}\n\nexport const thunkSetCurrentTest = (test : Test): ThunkAction<void, unknown, unknown, AnyAction> => {\n  return dispatch => {\n    const persistenceService = new PersistenceService()\n    const currentTestInPersistence = persistenceService.get('currentTest')\n    persistenceService.set('currentTest', {\n      state: currentTestInPersistence.state,\n      page: currentTestInPersistence.page,\n      test\n    })\n    dispatch(testSlice.actions.setCurrentTest(test))\n  }\n}\n\nexport const {\n  setRecentPageSize,\n  setRecentPageNumber,\n  setRecentFilter,\n  setTotalTests,\n  setPage\n} = testSlice.actions\nexport default testSlice.reducer","import { configureStore } from '@reduxjs/toolkit'\nimport authReducer from './auth/authSlice'\nimport testReducer from './test/testSlice'\nimport dashboardReducer from './dashboard/dashboardSlice'\n\nexport const store = configureStore({\n    reducer: {\n      auth: authReducer,\n      test: testReducer,\n      dashboard: dashboardReducer\n    }\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { Navigate } from 'react-router'\nimport { useAppSelector } from '../redux/hooks'\n\nexport const PrivateRoute = ({ children } : any) => {\n\n    const { token } = useAppSelector(state => state.auth.user)\n\n    return token\n        ? children\n        : <Navigate to=\"/auth\" />\n}","import { Navigate } from 'react-router'\nimport { useAppSelector } from '../redux/hooks'\n\nexport const PublicRoute = ({ children } : any) => {\n\n    const { token } = useAppSelector(state => state.auth.user)\n\n    return token\n        ? <Navigate to=\"/\" />\n        : children\n}","import { forwardRef } from 'react'\nimport MuiAlert, { AlertProps as MuiAlertProps } from '@mui/material/Alert'\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar'\nimport { useAppDispatch } from '../../redux/hooks'\nimport { clearError, clearInfoMessage, clearSuccessMessage } from '../../redux/auth/authSlice'\n\ninterface AlertProps {\n  message: string,\n  position?: SnackbarOrigin,\n  type: 'info' | 'success' | 'error',\n  onClose: Function\n}\n\nconst MuiAlertRef = forwardRef<\n  HTMLDivElement, \n  MuiAlertProps>((props, ref) => (\n    <MuiAlert \n      elevation={6} \n      ref={ref} \n      variant='filled'\n      {...props}\n    />\n  )\n)\n\nexport const Alert = ({type, message, position, onClose}: AlertProps) => {\n  const dispatch = useAppDispatch()\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return\n    }\n\n    onClose()\n\n    let fn: Function = () => {}\n\n    if (type === 'error')\n      fn = clearError\n    else if (type === 'info')\n      fn = clearInfoMessage\n    else if (type === 'success')\n      fn = clearSuccessMessage\n    \n    dispatch(fn(message))\n  }\n\n  return (\n    <Snackbar open autoHideDuration={6000} onClose={handleClose} anchorOrigin={position}>\n        <MuiAlertRef onClose={handleClose} severity={type} sx={{ width: '100%' }}>\n            {message}\n        </MuiAlertRef>\n    </Snackbar>\n  )\n} \n","import { SnackbarOrigin } from '@mui/material/Snackbar'\nimport { useAppDispatch } from '../../redux/hooks'\nimport { clearError, clearInfoMessage, clearSuccessMessage } from '../../redux/auth/authSlice'\nimport { Alert } from './Alert'\n\ninterface AlertProps {\n  message: string,\n  position?: SnackbarOrigin,\n  type: 'info' | 'success' | 'error'\n}\n\nexport const AuthAlert = ({type, message, position}: AlertProps) => {\n  const dispatch = useAppDispatch()\n\n  const onClose = () => {\n    let fn: Function = () => {}\n\n    if (type === 'error')\n      fn = clearError\n    else if (type === 'info')\n      fn = clearInfoMessage\n    else if (type === 'success')\n      fn = clearSuccessMessage\n    \n    dispatch(fn(message))\n  }\n\n  return (\n    <Alert \n        message={message}\n        type={type}\n        position={position}\n        onClose={onClose}\n    />\n  )\n} \n","import { SnackbarOrigin } from '@mui/material/Snackbar'\nimport { useAppDispatch } from '../../redux/hooks'\nimport { clearError, clearInfoMessage, clearSuccessMessage } from '../../redux/dashboard/dashboardSlice'\nimport { Alert } from './Alert'\n\ninterface AlertProps {\n  message: string,\n  position?: SnackbarOrigin,\n  type: 'info' | 'success' | 'error'\n}\n\nexport const DashboardAlert = ({type, message, position}: AlertProps) => {\n  const dispatch = useAppDispatch()\n\n  const onClose = () => {\n    let fn: Function = () => {}\n\n    if (type === 'error')\n      fn = clearError\n    else if (type === 'info')\n      fn = clearInfoMessage\n    else if (type === 'success')\n      fn = clearSuccessMessage\n    \n    dispatch(fn(message))\n  }\n\n  return (\n    <Alert \n        message={message}\n        type={type}\n        position={position}\n        onClose={onClose}\n    />\n  )\n} \n","import { useState } from 'react'\nimport TextField, { TextFieldProps } from '@mui/material/TextField'\nimport InputAdornment from '@mui/material/InputAdornment'\nimport IconButton from '@mui/material/IconButton'\nimport { Field } from 'formik'\nimport Visibility from '@mui/icons-material/Visibility'\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\n\ntype FormikFieldProps = TextFieldProps & {\n    touched?: boolean,\n    errorText?: string\n}\n\nexport const FormikField = ({\n    name, \n    label, \n    variant, \n    required, \n    touched, \n    errorText, \n    type,\n    ...rest\n} : FormikFieldProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false)\n\n    const handleClickShowPassword = () => {\n        setShowPassword(!showPassword)\n    }\n\n    const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {\n        event.preventDefault();\n    }\n\n    const getType = () => {\n        if (type === 'password'){\n            return (showPassword)? 'text' : 'password'\n        }\n        else \n            return type    \n    }\n\n    return (\n        <div>\n            <Field \n                { ...rest }\n                as={TextField}\n                required={required}\n                autoComplete='off'\n                name={name}\n                label={label} \n                variant={variant} \n                error={errorText !== undefined && touched}\n                helperText={touched && errorText}\n                type={getType()}\n                InputProps={{\n                    ...rest.InputProps,\n                    startAdornment: type==='password' && \n                    (\n                        <InputAdornment position=\"start\">\n                            <IconButton\n                                aria-label=\"toggle password visibility\"\n                                onClick={handleClickShowPassword}\n                                onMouseDown={handleMouseDownPassword}\n                                edge=\"start\"\n                            >\n                                {showPassword ? <VisibilityOff /> : <Visibility />}\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n        </div>\n    )\n}","import { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport MuiDialog from '@mui/material/Dialog'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\n\nexport interface DialogProps {\n  color?: \"inherit\" | \"primary\" | \"secondary\" | \"success\" | \"error\" | \"info\" | \"warning\" | undefined,\n  messageButton: string,\n  title: string,\n  content: string,\n  component: React.ReactNode\n}\n\nexport const Dialog = ({ \n  color,\n  messageButton, \n  title, \n  content, \n  component\n}: DialogProps) => {\n  const [open, setOpen] = useState(false)\n\n  const handleClickOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  return (\n    <div>\n      <Button variant=\"outlined\" onClick={ handleClickOpen } color={color}>\n        { messageButton }\n      </Button>\n      <MuiDialog open={ open } onClose={ handleClose }>\n        <DialogTitle>{ title }</DialogTitle>\n        <DialogContent>\n          <DialogContentText sx={{ marginBottom: 1 }}>\n            { content }\n          </DialogContentText>\n          { component }\n        </DialogContent>\n      </MuiDialog>\n    </div>\n  )\n}\n","import { Login } from \"../../models/auth\"\n\nexport const initialValues : Login = {\n    email: '',\n    password: ''\n}","import * as Yup from 'yup'\n\nexport const emailSchema = Yup.string()\n                                .email()\n                                .required()","import * as Yup from 'yup'\n\nexport const  passwordSchema = Yup.string()\n                                    .max(15)\n                                    .min(6)\n                                    .matches(\n                                        /^[0-9A-Za-z]*[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?][0-9a-zA-Z]*$/,\n                                        'Should contain one special character'\n                                    )\n                                    .matches(\n                                        /\\d/,\n                                        'Should contain a number'\n                                    )\n                                    .matches(\n                                        /(.*[A-Z].*)/,\n                                        'Should contain an uppercase letter'\n                                    )\n                                    .required()","import * as Yup from 'yup'\nimport { emailSchema } from '../common/emailSchema'\nimport { passwordSchema } from '../common/passwordSchema'\n\nexport const loginSchema = Yup.object().shape({\n    email: emailSchema,\n    password: passwordSchema\n})","import { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport { FormikField } from '../formik'\nimport { emailSchema } from '../../helpers/common/emailSchema'\nimport { useAppDispatch } from '../../redux/hooks'\nimport DialogActions from '@mui/material/DialogActions'\nimport { Button } from '@mui/material'\nimport * as AuthActions from '../../redux/auth/actions'\n\ninterface resetPasswordForm {\n    email: string\n}\nconst initialValues: resetPasswordForm = {\n    email: ''\n}\n\nexport const resetPasswordSchema = Yup.object().shape({\n    email: emailSchema\n})\n\nexport const ResetPasswordForm = () => {\n    const dispatch = useAppDispatch()\n\n    const handleForgetPassword = (values: resetPasswordForm) => {\n        dispatch(AuthActions.startChangePasswordAsync(values.email))\n    }\n\n    return (\n        <Formik \n            initialValues={initialValues}\n            onSubmit={handleForgetPassword}\n            validationSchema={resetPasswordSchema}\n            validateOnChange\n        >\n            {({errors, touched, isValid, dirty, values}) => (\n                <Form>\n                    <div>\n                        <FormikField\n                            name='email'\n                            type='input' \n                            label='Email' \n                            variant='standard' \n                            errorText={errors.email} \n                            touched={touched.email}\n                            required\n                        />\n                    </div>\n\n                    <DialogActions>\n                        <Button type='submit' disabled={ !dirty || !isValid }>Reset password</Button>\n                    </DialogActions>\n                </Form>\n            )}\n        </Formik>\n    )\n}","import { Formik, Form } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { Avatar, Box, Container, Grid, Typography } from '@mui/material'\nimport { LoadingButton } from '@mui/lab'\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined'\n\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks'\nimport { Login } from '../../models/auth'\nimport { FormikField } from '../../components/formik'\nimport { Dialog } from '../../components/dialog/Dialog'\nimport { loginSchema, initialValues } from '../../helpers/login'\nimport { ResetPasswordForm } from '../../components/reset-password/ResetPasswordForm'\nimport * as AuthActions from '../../redux/auth/actions'\n\nexport const LoginScreen = () => {\n    const dispatch = useAppDispatch()\n    const { status }= useAppSelector(state => state.auth)\n    \n    const handleSubmit = (values: Login) : void => {\n        dispatch(AuthActions.loginAsync(values))\n    }\n\n    return (\n        <Container component='main'>\n            <Box\n                sx={{\n                    marginTop: 8,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                }}\n            >\n                <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                    <LockOutlinedIcon />\n                </Avatar>\n\n                <Typography component='h1' variant='h5'>\n                    Sign in\n                </Typography>\n\n                <Box sx={{ \n                    mt: 1, \n                    maxWidth: 0.7,\n                    width: 400\n                }}>\n                    <Formik \n                        initialValues={initialValues}\n                        onSubmit={handleSubmit}\n                        validationSchema={loginSchema}\n                    >\n                        {({isValid, dirty, errors, touched}) => (\n                            <Form>\n                                <div>\n                                    <FormikField \n                                        name='email'\n                                        type='input' \n                                        label='Email'\n                                        errorText={errors.email} \n                                        touched={touched.email}\n                                        margin='normal'\n                                        fullWidth\n                                        required\n                                    />\n                                </div>\n\n                                <div>\n                                    <FormikField \n                                        name='password' \n                                        type='password'\n                                        label='Password'\n                                        errorText={errors.password}\n                                        touched={touched.password}\n                                        margin='normal'\n                                        fullWidth\n                                        required \n                                    />\n                                </div>\n\n                                <LoadingButton\n                                    disabled={!dirty || !isValid}\n                                    type='submit'\n                                    fullWidth\n                                    variant='contained'\n                                    loading={status === 'loading'}\n                                    sx={{ mt: 3, mb: 2 }}\n                                >\n                                    Login\n                                </LoadingButton>\n                                \n                            </Form> \n                        )}\n                    </Formik>\n\n                    <Grid container>\n                        <Grid item xs>\n                            <Link to='/auth/register'>Sign up</Link>\n                        </Grid>\n                        <Grid item>\n                            <Dialog\n                                messageButton='Reset password'\n                                title='Reset password'\n                                content='Enter your email to remember the password' \n                                component={\n                                    <ResetPasswordForm />\n                                }\n                            /> \n                        </Grid>\n                    </Grid>\n                </Box>\n            </Box>\n        </Container>\n    )\n}\n","import { Register } from '../../models/auth'\n\nexport const initialValues : Register = {\n    email: '',\n    password: '',\n    repeatPassword: ''\n}","import * as Yup from 'yup'\nimport { emailSchema } from '../common/emailSchema'\nimport { passwordSchema } from '../common/passwordSchema'\n\nexport const registerSchema = Yup.object().shape({\n    email: emailSchema,\n    password: passwordSchema,\n    repeatPassword: Yup.string()\n                            .oneOf(\n                                [Yup.ref('password'), ''], \n                                'Passwords should match'\n                            ).required('Repeat password is required')\n})","import { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport { FormikField } from '../formik'\nimport { emailSchema } from '../../helpers/common/emailSchema'\nimport { useAppDispatch } from '../../redux/hooks'\nimport { Button, DialogActions } from '@mui/material'\nimport * as AuthActions from '../../redux/auth/actions'\n\ninterface sendConfirmationEmailForm {\n    email: string\n}\n\nconst initialValues: sendConfirmationEmailForm = {\n    email: ''\n}\n\nexport const resendConfirmationEmailSchema = Yup.object().shape({\n    email: emailSchema\n})\n\nexport const ResendConfirmationEmailForm = () => {\n    const dispatch = useAppDispatch()\n\n    const resendConfirmation = (values: sendConfirmationEmailForm) => {\n        dispatch(AuthActions.resendConfirmationEmailAsync(values.email))\n    }\n\n    return (\n        <Formik \n            initialValues={initialValues}\n            onSubmit={resendConfirmation}\n            validationSchema={resendConfirmationEmailSchema}\n            validateOnChange\n        >\n            {({errors, touched, isValid, dirty}) => (\n                <Form>\n                    <div>\n                        <FormikField \n                            name='email'\n                            type='input' \n                            label='Email' \n                            variant='standard' \n                            errorText={errors.email} \n                            touched={touched.email}\n                            required\n                        />\n                    </div>\n\n                    <DialogActions>\n                        <Button type='submit' disabled={ !dirty || !isValid }>Resend confirmation</Button>\n                    </DialogActions>\n                </Form>\n            )}\n        </Formik>\n    )\n}","import { Link } from 'react-router-dom'\nimport { Formik, Form } from 'formik'\nimport { Avatar, Box, Container, Grid, Typography } from '@mui/material'\nimport { LoadingButton } from '@mui/lab'\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined'\n\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks'\nimport * as AuthActions from '../../redux/auth/actions'\nimport { Register } from '../../models/auth'\nimport { FormikField } from '../../components/formik'\nimport { initialValues, registerSchema } from '../../helpers/register'\nimport { Dialog } from '../../components/dialog/Dialog'\nimport { ResendConfirmationEmailForm } from '../../components/resend-confirmation-email/ResendConfirmationEmailForm'\n\nexport const RegisterScreen = () => {\n    const dispatch = useAppDispatch()\n    const { status } = useAppSelector(state => state.auth)\n    \n    const handleSubmit = (values: Register) : void => {\n        dispatch(AuthActions.registerAsync(values))\n    }\n\n    return (\n        <Container component='main'>\n            <Box\n                sx={{\n                    marginTop: 8,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                }}\n            >\n                <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                    <LockOutlinedIcon />\n                </Avatar>\n\n                <Typography component='h1' variant='h5'>\n                    Sign up\n                </Typography>\n\n                <Box sx={{ \n                    mt: 1, \n                    maxWidth: 0.7,\n                    width: 400\n                }}>\n                    <Formik \n                        initialValues={initialValues}\n                        onSubmit={handleSubmit}\n                        validationSchema={registerSchema}\n                        validateOnMount\n                    >\n                        {({isValid, dirty, errors, touched}) => (\n                            <Form>\n                                <div>\n                                    <FormikField \n                                        name='email'\n                                        type='input' \n                                        label='Email'\n                                        errorText={errors.email} \n                                        touched={touched.email}\n                                        margin='normal'\n                                        fullWidth\n                                        required\n                                    />\n                                </div>\n\n                                <div>\n                                    <FormikField \n                                        name='password' \n                                        type='password'\n                                        label='Password'\n                                        errorText={errors.password}\n                                        touched={touched.password}\n                                        margin='normal'\n                                        fullWidth\n                                        required \n                                    />\n                                </div>\n\n                                <div>\n                                    <FormikField \n                                        name='repeatPassword'\n                                        type='password'\n                                        label='Repeat the password'\n                                        errorText={errors.repeatPassword}\n                                        touched={touched.repeatPassword}\n                                        margin='normal'\n                                        fullWidth\n                                        required\n                                    />\n                                </div>\n\n                                <LoadingButton\n                                    disabled={!dirty || !isValid}\n                                    type='submit'\n                                    fullWidth\n                                    variant='contained'\n                                    loading={status === 'loading'}\n                                    sx={{ mt: 3, mb: 2 }}\n                                >\n                                    Sign up\n                                </LoadingButton>\n                            </Form> \n                        )}\n                    </Formik>\n\n                    <Grid container>\n                        <Grid item xs>\n                            <Link to='/auth/login'>Sign in</Link>\n                        </Grid>\n                        <Grid item>\n                            <Dialog\n                                messageButton='Resend confirmation email'\n                                title='Resend confirmation email'\n                                content='Enter the email to resend the confirmation email' \n                                component={\n                                    <ResendConfirmationEmailForm />\n                                }\n                            />\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Box>\n        </Container>\n    )\n}\n","import { Navigate, useParams } from 'react-router-dom'\nimport { CircularProgress, Grid } from '@mui/material'\n\nimport * as AuthActions from '../../redux/auth/actions'\nimport { ConfirmEmail } from '../../models/auth'\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks'\nimport { useEffect } from 'react'\n\nexport const ConfirmEmailScreen = () => {\n    const dispatch = useAppDispatch()\n    const params = useParams<ConfirmEmail>()\n    const { status } = useAppSelector(state => state.auth)\n\n    useEffect(() => {\n        dispatch(AuthActions.confirmEmailAsync({\n            email: params.email ?? '',\n            token: params.token ?? ''\n        }))\n    }, [dispatch, params])\n\n    if (status === 'loading')\n        return (\n            <Grid\n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                style={{ minHeight: '100vh' }}\n            >\n                <CircularProgress />\n            </Grid> \n        )\n    else \n        return (\n            <Navigate to=\"/auth/login\" replace />\n        )\n}\n","import * as Yup from 'yup'\nimport { emailSchema } from '../common/emailSchema'\nimport { passwordSchema } from '../common/passwordSchema'\n\nexport const changePasswordSchema = Yup.object().shape({\n    email: emailSchema,\n    password: passwordSchema,\n    repeatPassword: Yup.string()\n                            .oneOf(\n                                [Yup.ref('password'), null], \n                                'Passwords should match'\n                            ).required('Repeat password is required')\n})","import { ChangePasswordForm } from '../../models/auth'\n\nexport const initialValues : ChangePasswordForm = {\n    email: '',\n    password: '',\n    repeatPassword: ''\n}","import { Formik, Form } from 'formik'\nimport { useParams } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\nimport { Avatar, Box, Button, Container, Typography } from '@mui/material'\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined'\n\n\nimport * as AuthActions from '../../redux/auth/actions'\nimport { useAppDispatch } from '../../redux/hooks'\nimport { ChangePassword, ChangePasswordForm, ChangePasswordParams } from '../../models/auth'\nimport { initialValues, changePasswordSchema } from '../../helpers/change-password'\nimport { FormikField } from '../../components/formik'\n\nexport const ChangePasswordScreen = () => {\n    const dispatch = useAppDispatch()\n    const { email, token } = useParams<ChangePasswordParams>()\n    initialValues.email = email ?? ''\n\n    const handleSubmit = (values: ChangePasswordForm) => {\n        dispatch(AuthActions.changePasswordAsync({\n            email: values.email,\n            password: values.password,\n            token\n        } as ChangePassword))\n    }\n\n    return (\n        <Container component='main'>\n            <Box\n                sx={{\n                    marginTop: 8,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                }}\n            >\n                <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                    <LockOutlinedIcon />\n                </Avatar>\n\n                <Typography component='h1' variant='h5'>\n                    Change password\n                </Typography>\n\n                <Box sx={{ \n                    mt: 1, \n                    maxWidth: 0.7,\n                    width: 400\n                }}>\n                    <Formik\n                        initialValues={initialValues}\n                        onSubmit={handleSubmit}\n                        validationSchema={changePasswordSchema}\n                        validateOnMount\n                    >\n                        {({isValid, dirty, errors, touched}) => (\n                            <Form>\n                                <div>\n                                    <FormikField \n                                        name='email'\n                                        type='input' \n                                        label='Email'\n                                        errorText={errors.email} \n                                        touched={touched.email}\n                                        margin='normal'\n                                        fullWidth\n                                        required\n                                    />\n                                </div>\n\n                                <div>\n                                    <FormikField \n                                        name='password' \n                                        type='password'\n                                        label='Password'\n                                        errorText={errors.password}\n                                        touched={touched.password}\n                                        margin='normal'\n                                        fullWidth\n                                        required \n                                    />\n                                </div>\n\n                                <div>\n                                    <FormikField \n                                        name='repeatPassword' \n                                        type='password'\n                                        label='Repeat the password'\n                                        errorText={errors.repeatPassword}\n                                        touched={touched.repeatPassword}\n                                        margin='normal'\n                                        fullWidth\n                                        required \n                                    />\n                                </div>\n\n                                <Button\n                                    disabled={!dirty || !isValid}\n                                    type='submit'\n                                    fullWidth\n                                    variant='contained'\n                                    sx={{ mt: 3, mb: 2 }}\n                                >\n                                    Change password\n                                </Button>\n                            </Form> \n                        )}\n                    </Formik>\n\n                    <div>\n                    <Link to='/auth/login'>Sign in</Link>\n                    </div>\n                </Box>\n            </Box>\n        </Container>\n    )\n}\n","import { Difficulty } from '../../models/test/difficulty'\n\nexport const difficultyToColor = (difficulty: Difficulty) => {\n    switch(difficulty as Difficulty)\n    {\n        case Difficulty.EASY:\n            return 'success'\n        case Difficulty.MEDIUM:\n            return 'warning'\n        case Difficulty.HARD:\n            return 'error'\n        default:\n            return undefined\n    }\n}\n\nexport const difficultyToString = (difficulty: Difficulty) => {\n    switch(difficulty as Difficulty)\n    {\n        case Difficulty.EASY:\n            return 'Easy'\n        case Difficulty.MEDIUM:\n            return 'Medium'\n        case Difficulty.HARD:\n            return 'Hard'\n        default:\n            return 'Not found'\n    }\n}","\nexport enum TestType {\n    OptionWordToVideo_Error = 'OptionWordToVideo_Error', \n    OptionWordToVideo = 'OptionWordToVideo', \n    \n    OptionVideoToWord_Error = 'OptionVideoToWord_Error', \n    OptionVideoToWord = 'OptionVideoToWord', \n\n    Mimic_Error = 'Mimic_Error', \n    Mimic = 'Mimic', \n\n    QA_Error = 'QA_Error', \n    QA = 'QA'\n}","import { TestType } from '../../models/test/testType'\n\nexport const testTypeToString = (testType: TestType) => {\n    switch (testType as TestType) {\n        case TestType.Mimic:\n            return 'Mimic'\n        case TestType.Mimic_Error:\n            return 'Mimic - Error Test'\n\n        case TestType.QA:\n            return 'QA'\n        case TestType.QA_Error:\n            return 'QA - Error Test'\n\n        case TestType.OptionVideoToWord:\n            return 'Video to word'\n        case TestType.OptionVideoToWord_Error:\n            return 'Video to word - Error Test'\n        \n        case TestType.OptionWordToVideo:\n            return 'Word to video'\n        case TestType.OptionWordToVideo_Error:\n            return 'Word to video - Error Test'\n                   \n        default:\n            return 'Not found'\n    }\n}","import { useCallback, useEffect, useState } from 'react'\nimport { FormControl, FormControlLabel, FormLabel, Paper, Radio, RadioGroup, Typography } from '@mui/material'\nimport { useAppDispatch } from '../../redux/hooks'\nimport * as StatsApi from '../../api/stats'\nimport { setErrors } from '../../redux/dashboard/dashboardSlice'\nimport { NumberOfLearntWordsQueryFilter } from '../../models/queryFilters'\n\nenum FilterType {\n    year = 'year', month = 'month', day = 'day'\n}\n\ninterface IFilter {\n    value: NumberOfLearntWordsQueryFilter,\n    type: FilterType\n}\n\nexport const NewWordsLearnt = () => {\n  const dispatch = useAppDispatch()\n  const [stat, setStat] = useState<number>(0)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const [apiFilter, setApiFilter] = useState<IFilter>({\n      type: FilterType.year,\n      value: { year: new Date().getFullYear() }\n  })\n\n  const onChangeFilter = (event: React.ChangeEvent<HTMLInputElement>, value: string) => {\n    let newApiFilter : IFilter = {\n        type: FilterType.year,\n        value: { year: new Date().getFullYear() }\n    }\n\n    switch(value as FilterType) {\n        case FilterType.day: \n            newApiFilter = {\n                type: FilterType.day,\n                value: {\n                    ...newApiFilter.value,\n                    month: new Date().getMonth() + 1,\n                    day: new Date().getDate()\n                }\n            }\n            break;\n        case FilterType.month: \n            newApiFilter = {\n                type: FilterType.month,\n                value: {\n                    ...newApiFilter.value,\n                    month: new Date().getMonth() + 1\n                }\n            }\n            break;\n        case FilterType.year:\n            newApiFilter = {\n                type: FilterType.year,\n                value: {\n                    ...newApiFilter.value\n                }\n            }\n            break;\n    }\n\n    setApiFilter(newApiFilter)\n    setIsLoading(true)\n  }\n\n  const getStat = useCallback(async (abortController: AbortController) => {\n    const response = await StatsApi.getNumberOfLearntWords(apiFilter.value, abortController)\n    return response\n  }, [apiFilter])\n\n  useEffect(() => {\n    const abortController = new AbortController()\n\n    const fetchStat = async () => {\n      getStat(abortController)\n        .then( async (result) => {\n          if (!result.ok)\n          {\n            const error = (result.status === 401) \n              ? 'Your session has expired. Login again.'\n              : 'Something went wrong'\n            dispatch(setErrors([error]))\n            return\n          }\n\n          const body = await result.json()\n          setStat(body.stat)\n          setIsLoading(false)\n        })\n        .catch( () => {\n          if (abortController.signal.aborted) return\n          dispatch(setErrors(['Something went wrong']))\n        })\n    }\n\n    fetchStat()\n\n    return () => {\n      abortController.abort()\n    }\n  }, [dispatch, getStat])\n\n    return (\n      <Paper elevation={3} sx={{ padding: 3 }}>\n        <Typography variant='h4' component='h2'>\n          New words learnt: { (isLoading)? '...' : stat }\n        </Typography>\n\n        <FormControl>\n            <FormLabel>Filter by</FormLabel>\n            <RadioGroup value={apiFilter.type} onChange={onChangeFilter}>\n                <FormControlLabel value={FilterType.day} control={<Radio />} label='Day' />\n                <FormControlLabel value={FilterType.month} control={<Radio />} label='Month' />\n                <FormControlLabel value={FilterType.year} control={<Radio />} label='Year' />\n            </RadioGroup>\n        </FormControl>\n      </Paper>\n  )\n}\n","import Card from '@mui/material/Card'\nimport CardContent from '@mui/material/CardContent'\nimport Typography from '@mui/material/Typography'\nimport { Box, CardActionArea, Chip } from '@mui/material'\nimport { Test } from '../../models/test'\nimport { difficultyToColor } from '../../helpers/difficulty'\nimport { testTypeToString } from '../../helpers/testType'\nimport { useNavigate } from 'react-router-dom'\n\ntype CardTestProps = {\n  test: Test\n}\n\nexport const CardTest = ({test}: CardTestProps) => {\n  const navigate = useNavigate()\n\n  const handleOnClick = () => {\n    navigate(`/test/review/${test.id}`)\n  }\n\n  return (\n    <Card sx={{ minWidth: 340, maxWidth: 360, marginBottom: '10px' }} onClick={handleOnClick}>\n      <CardActionArea>\n        <CardContent>\n          <Box sx={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n            <Typography gutterBottom variant=\"h6\" component=\"div\">\n              { testTypeToString(test.testType) }\n            </Typography>\n            <Chip label={ test.difficulty } color={difficultyToColor(test.difficulty)} />\n          </Box>\n          <Box sx={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              Questions: { test.questions.length }\n            </Typography>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              { new Date(test.createdOn).toLocaleDateString() } { new Date(test.createdOn).toLocaleTimeString(undefined, {hour: '2-digit', minute:'2-digit'}) }\n            </Typography>\n          </Box>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  )\n}\n","import { Box, FormControl, InputLabel, MenuItem, Select, SelectChangeEvent, FormControlLabel, Checkbox, Accordion, AccordionSummary, AccordionDetails, Typography } from \"@mui/material\"\nimport { ReactNode, useEffect, useState } from \"react\"\nimport { TestType } from \"../../models/test\"\nimport { Difficulty } from '../../models/test/difficulty'\nimport FilterAltIcon from '@mui/icons-material/FilterAlt'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport { DateRangePicker } from 'react-date-range'\nimport 'react-date-range/dist/styles.css' // main style file\nimport 'react-date-range/dist/theme/default.css' // theme css file\n\ninterface IFilter {\n    onChange: Function,\n    value: any\n}\n\ninterface ISelectionRange {\n    startDate?: Date,\n    endDate?: Date,\n    key: string\n}\n\nexport const Filter = ({ onChange, value } : IFilter) => {\n    const [showFilter, setShowFilter] = useState<boolean>(false)\n    const [checked, setChecked] = useState<boolean>(false)\n    const [selectionRange, setSelectionRange] = useState<ISelectionRange>({\n        startDate: value.fromDate ?? new Date(),\n        endDate: value.toDate ?? new Date(),\n        key: 'selection'\n    })\n    \n    useEffect(() => {\n        const el = document.getElementsByClassName('rdrDefinedRangesWrapper')[0] as HTMLElement\n        if (el) el.style.display = 'none'\n    }, [])\n\n    const handleChangeDifficulty = (event: SelectChangeEvent<any>, child: ReactNode) => {\n        const newValue = event.target.value\n        onChange({\n           difficulty: newValue\n        })    \n    }\n\n    const handleChangeTestType = (event: SelectChangeEvent<any>, child: ReactNode) => {\n        const newValue = event.target.value\n        onChange({\n           type: newValue\n        })    \n    }\n\n    const handleSelect = (ranges : any) => {\n        setSelectionRange(ranges.selection)\n    }\n\n    const handleChange = (ev : any, expanded : boolean) => {\n        setShowFilter(expanded)\n    }\n\n    const handleChangeCheckbox = () => {\n        setChecked(!checked)\n    }\n\n    useEffect(() => {\n        onChange({\n            fromDate: selectionRange.startDate?.toUTCString(),\n            toDate: selectionRange.endDate?.toUTCString(),\n            useDateFiltering: checked\n        })\n    }, [selectionRange, onChange, checked])\n\n    return (\n        <Accordion sx={{ marginBottom: 3 }} expanded={showFilter} onChange={handleChange}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <FilterAltIcon />\n                <Typography>Filters</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Box sx={{ marginBottom: 3, marginTop: 3, display: 'flex', flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>\n                    <FormControl sx={{ width: '45%' }}>\n                        <InputLabel>Difficulty</InputLabel>\n                        <Select\n                            value={value.difficulty ?? ''}\n                            label=\"Difficulty\"\n                            onChange={handleChangeDifficulty}\n                        >\n                            <MenuItem value=''>All difficulties</MenuItem>\n                            <MenuItem value={Difficulty.EASY}>Easy</MenuItem>\n                            <MenuItem value={Difficulty.MEDIUM}>Medium</MenuItem>\n                            <MenuItem value={Difficulty.HARD}>Hard</MenuItem>\n                        </Select>\n                    </FormControl>\n\n                    <FormControl sx={{ width: '45%' }}>\n                        <InputLabel>Type of test</InputLabel>\n                        <Select\n                            value={value.type ?? ''}\n                            label=\"Type of test\"\n                            onChange={handleChangeTestType}\n                        >\n                            <MenuItem value=''>All tests</MenuItem>\n                            <MenuItem value={TestType.Mimic}>Mimic</MenuItem>\n                            <MenuItem value={TestType.Mimic_Error}>Mimic - Error test</MenuItem>\n                            <MenuItem value={TestType.QA}>QA</MenuItem>\n                            <MenuItem value={TestType.QA_Error}>QA - Error test</MenuItem>\n                            <MenuItem value={TestType.OptionVideoToWord}>Video to word</MenuItem>\n                            <MenuItem value={TestType.OptionVideoToWord_Error}>Video to word - Error test</MenuItem>\n                            <MenuItem value={TestType.OptionWordToVideo}>Word to video</MenuItem>\n                            <MenuItem value={TestType.OptionWordToVideo_Error}>Word to video - Error test</MenuItem>\n                        </Select>   \n                    </FormControl>\n                </Box>\n\n                <FormControlLabel \n                    control={\n                        <Checkbox checked={checked}\n                            onChange={handleChangeCheckbox}\n                            inputProps={{ 'aria-label': 'controlled' }}\n                        />\n                    } \n                    label=\"Filter by date\" \n                />\n\n                <Box sx={{ width: '100%', display: 'flex', justifyContent: 'center'}}>\n                    <DateRangePicker\n                        maxDate={new Date()}\n                        ranges={[selectionRange]}\n                        onChange={handleSelect}\n                    />\n                </Box>\n            </AccordionDetails>\n        </Accordion>\n    )\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Typography, TablePagination, Skeleton, Box, Card, CardContent, Grid } from '@mui/material'\nimport { Test } from '../models/test'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport * as TestApi from '../api/test'\nimport { CardTest } from '../components/test/CardTest'\nimport { setRecentFilter, setRecentPageNumber, setTotalTests } from '../redux/test/testSlice'\nimport { setErrors } from '../redux/dashboard/dashboardSlice'\nimport { Filter } from '../components/home/Filter'\n\ninterface Metadata {\n  TotalCount: number\n}\n\nexport const HomeScreen = () => {\n  const { filters, totalTests } = useAppSelector(state => state.test)\n  const { id } = useAppSelector(state => state.auth.user)\n  const dispatch = useAppDispatch()\n  const [recentTests, setRecentTests] = useState<Test[]>([])\n  const [isLoaded, setIsLoaded] = useState<boolean>(false)\n\n  const getTests = useCallback(async (abortController: AbortController) => {\n    return await TestApi.getTests({\n      pageSize: filters.recent.pageSize, \n      pageNumber: filters.recent.pageNumber + 1,\n      difficulty: filters.recent.difficulty,\n      testType: filters.recent.type,\n      fromDate: filters.recent.fromDate,\n      toDate: filters.recent.toDate,\n      userId: id ?? '',\n    }, abortController)\n  }, [id, filters.recent])\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    dispatch(setRecentFilter({\n      ...filters.recent,\n      pageSize: parseInt(event.target.value, 10), \n      pageNumber: 0\n    }))\n  }\n\n  const handleChangePage = (e : any, newPage: number) => {\n    dispatch(setRecentPageNumber(newPage))\n  }\n\n  const handleChangeFilter = useCallback((value: any) => {\n    const updatedFilter = { ...filters.recent, ...value }\n    if (!updatedFilter.useDateFiltering) {\n      delete updatedFilter.fromDate\n      delete updatedFilter.toDate\n    }\n    delete updatedFilter.useDateFiltering\n  \n    if (JSON.stringify(filters.recent) !== JSON.stringify(updatedFilter)) {\n      dispatch(setRecentFilter(updatedFilter))\n    }\n  }, [dispatch, filters.recent])\n\n  useEffect(() => {\n    const abortController = new AbortController()\n\n    const fetchAndSet = async () => {\n      setIsLoaded(false)\n      getTests(abortController)\n        .then( async (result) => {\n          if (!result.ok)\n          {\n            const error = (result.status === 401) \n              ? 'Your session has expired. Login again.'\n              : 'Something went wrong'\n            dispatch(setErrors([error]))\n            return\n          }\n\n          const body = await result.json() as Test[]\n          const pagination = JSON.parse(result.headers.get('X-Pagination') ?? '') as Metadata\n          \n          dispatch(setTotalTests(pagination.TotalCount))\n          setRecentTests(body)\n          setIsLoaded(true)\n        })\n        .catch( () => {\n          if (abortController.signal.aborted) return\n          dispatch(setErrors(['Something went wrong']))\n        })\n    }\n\n    fetchAndSet()\n\n    return () => {\n      abortController.abort()\n    }\n  }, [dispatch, getTests])\n\n  return (\n    <Grid\n        container\n        spacing={0}\n        direction=\"column\"\n        alignItems=\"center\"\n        width={'100vw'}\n    >\n      <Typography variant='h3' component='h1'>Recent quizs</Typography>\n\n      <TablePagination\n        component=\"div\"\n        count={totalTests}\n        page={filters.recent.pageNumber}\n        onPageChange={handleChangePage}\n        rowsPerPage={filters.recent.pageSize}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n        rowsPerPageOptions={[5, 10]}\n      />\n\n      <Box sx={{minWidth: 340, maxWidth: 360, marginBottom: 3 }}>\n        <Filter onChange={handleChangeFilter} value={filters.recent} />\n      </Box>\n\n      <Box sx={{ marginBottom: 3 }}>\n        {\n          (!isLoaded)\n            ? (\n              Array.from({ length: filters.recent.pageSize }).map((t, index) => (\n                <Card sx={{minWidth: 340, maxWidth: 360, marginBottom: '10px'}} key={index}>\n                  <CardContent>\n                    <Box>\n                      <Box sx={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>\n                        <Skeleton animation=\"wave\" variant=\"rectangular\" width={'30%'} />\n                        <Skeleton animation=\"wave\" variant=\"circular\" width={40} height={40} />\n                      </Box> \n                      <Box sx={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n                        <Skeleton animation=\"wave\" variant=\"rectangular\" width={'30%'} />\n                        <Skeleton animation=\"wave\" variant=\"rectangular\" width={'30%'} />\n                      </Box>\n                    </Box>\n                  </CardContent>\n                </Card>\n              ))\n            )\n            : (\n              recentTests.map(t => ( <CardTest test={t} key={t.id} /> ))\n            )\n        }\n      </Box>\n\n    </Grid> \n  )\n}\n","import { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport { FormikField } from '../formik'\nimport { emailSchema } from '../../helpers/common/emailSchema'\nimport { useAppDispatch } from '../../redux/hooks'\nimport DialogActions from '@mui/material/DialogActions'\nimport EmailIcon from '@mui/icons-material/Email'\nimport { Box, Button } from '@mui/material'\nimport { thunkChangeEmail } from '../../redux/auth/authSlice'\n\ninterface changeEmailForm {\n    email: string,\n    repeatedEmail: string\n}\nconst initialValues: changeEmailForm = {\n    email: '',\n    repeatedEmail: ''\n}\n\nexport const changeEmailSchema = Yup.object().shape({\n    email: emailSchema,\n    repeatedEmail: Yup.string()\n                            .oneOf(\n                                [Yup.ref('email'), ''], \n                                'Emails should match'\n                            ).required('Repeated email is required')\n})\n\nexport const ChangeEmailForm = () => {\n    const dispatch = useAppDispatch()\n    \n    const handleChangeEmail = (values: changeEmailForm) => {\n        dispatch(thunkChangeEmail(values.email))\n    }\n\n    return (\n        <Formik \n            initialValues={initialValues}\n            onSubmit={handleChangeEmail}\n            validationSchema={changeEmailSchema}\n            validateOnChange\n        >\n            {({errors, touched, isValid, dirty, values}) => (\n                <Form>\n                    <div>\n                        <FormikField\n                            name='email'\n                            type='input' \n                            label='Email' \n                            variant='standard' \n                            errorText={errors.email} \n                            touched={touched.email}\n                            required\n                        />\n                    </div>\n\n                    <Box sx={{ marginTop: 1 }}>\n                        <FormikField\n                            name='repeatedEmail'\n                            type='input' \n                            label='Repeat the email' \n                            variant='standard' \n                            errorText={errors.repeatedEmail} \n                            touched={touched.repeatedEmail}\n                            required\n                        />\n                    </Box>\n\n                    <DialogActions>\n                        <Button \n                            startIcon={<EmailIcon />}\n                            type='submit' disabled={ !dirty || !isValid }\n                        >\n                            Change email\n                        </Button>\n                    </DialogActions>\n                </Form>\n            )}\n        </Formik>\n    )\n}","import { useAppDispatch } from '../../redux/hooks'\nimport DialogActions from '@mui/material/DialogActions'\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Button } from '@mui/material'\nimport { thunkDeleteMyAccount } from '../../redux/auth/authSlice'\n\nexport const DeleteMyAccountForm = () => {\n    const dispatch = useAppDispatch()\n    \n    const handleDeleteMyAccount = () => {\n        dispatch(thunkDeleteMyAccount())\n    }\n\n    return (\n        <DialogActions>\n            <Button \n                onClick={handleDeleteMyAccount}\n                startIcon={<DeleteIcon />}\n                color='error'\n            >\n                Delete my account\n            </Button>\n        </DialogActions>\n    )\n}","import { useCallback, useEffect, useState } from 'react'\nimport { Box, Container, Divider, Typography } from '@mui/material'\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport { LoadingButton } from '@mui/lab'\nimport * as TestApi from '../../api/test'\nimport { setErrors, setInfoMessages } from '../../redux/dashboard/dashboardSlice'\nimport { Dialog } from '../../components/dialog/Dialog'\nimport { ChangeEmailForm } from '../../components/change-email/ChangeEmailForm'\nimport { DeleteMyAccountForm } from '../../components/delete-my-account/DeleteMyAccountForm'\n\nexport const ProfileScreen = () => {\n  const { user } = useAppSelector(state => state.auth)\n  const dispatch = useAppDispatch()\n  const [loadingDeleteTests, setLoadingDeleteTests] = useState<boolean>(false)\n  const [abortController, ] = useState(new AbortController())\n\n  useEffect(() => {\n    return (() => {\n      abortController.abort()\n    })\n  }, [abortController])\n\n  const deleteTestsCallback = useCallback(async (abortController : AbortController) => {\n    return await TestApi.deleteAllTests(abortController)\n  }, [])\n\n  const handleDeleteTests = () => {\n    const deleteTests = async () => {\n      setLoadingDeleteTests(true)\n      deleteTestsCallback(abortController)\n        .then( async (result) => {\n          if (!result.ok)\n          {\n            const error = (result.status === 401) \n              ? 'Your session has expired. Login again.'\n              : 'Something went wrong'\n            throw Error(error)\n          }\n\n          dispatch(setInfoMessages(['The tests have been deleted']))\n        })\n        .catch( (error) => {\n          if (abortController.signal.aborted) return\n          dispatch(setErrors([error]))\n        })\n        .finally( () => {\n          setLoadingDeleteTests(false)\n        })\n    }\n\n    deleteTests()\n  }\n\n  return (\n    <Container component='main' sx={{marginBottom: 3 }}>\n      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <Typography variant='h3' component='h1' sx={{ marginBottom: 3 }}>My profile</Typography>\n\n        <Divider sx={{ width: '80%', marginBottom: 3 }} />\n\n        <Typography>Email: { user.email }</Typography>\n        \n        <Box sx={{ minWidth: 340, maxWidth: 400, marginTop: 3 }}>\n          <Box sx={{ width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n            <LoadingButton \n              onClick={handleDeleteTests}\n              loading={loadingDeleteTests} \n              size=\"small\" sx={{ maxWidth: '45%' }} variant=\"outlined\" \n              startIcon={<DeleteIcon />} color=\"error\"\n            >\n              Delete all my tests\n            </LoadingButton>\n\n            <Dialog\n                messageButton='Change email'\n                title='Change email'\n                content='Enter a new email. Take into account that you will have to confirm your email again and login. If the email introduced is incorrect, you should call support.' \n                component={\n                    <ChangeEmailForm />\n                }\n            />\n          </Box>\n        </Box>\n        \n        <Box sx={{ marginTop: 3 }}>\n          <Dialog\n            color='error'\n            messageButton='Delete my account'\n            title='Delete my account'\n            content='Are you sure? You will not be able to recover your data again' \n            component={\n              <DeleteMyAccountForm />\n            }\n          />\n        </Box>\n\n      </Box>\n    </Container>\n  )\n}\n","import getBaseUrl from '../helpers/getBaseUrl'\nimport {\n    NumberOfLearntWordsQueryFilter,\n    UseOfTheAppQueryFilter,\n    SuccessRateQueryFilter\n} from '../../models/queryFilters'\nimport { PersistenceService } from '../../services/persistenceService'\nimport { Difficulty } from '../../models/test'\n\nconst baseURL = getBaseUrl()\nconst getToken = () => {\n    return new PersistenceService().get('user')?.token\n}\nconst baseEndpoint = `${baseURL}/stats`\n\nconst getUseOfTheApp = (filter : UseOfTheAppQueryFilter, abortController: AbortController) => {\n    return fetch(`${baseEndpoint}/use-of-the-app?Year=${filter.year}&Month=${filter.month}`, {\n        signal: abortController.signal,\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nconst getBestStreak = (abortController: AbortController) => {\n    return fetch(`${baseEndpoint}/best-streak`, {\n        signal: abortController.signal,\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nconst getCurrentStreak = (abortController: AbortController) => {\n    return fetch(`${baseEndpoint}/current-streak`, {\n        signal: abortController.signal,\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nconst getNumberOfLearntWords = (filter: NumberOfLearntWordsQueryFilter, abortController: AbortController) => {\n    return fetch(`${baseEndpoint}/number-of-learnt-words?Year=${filter.year}${(filter.month !== undefined) ? `&Month=${filter.month}` : '' }${(filter.day !== undefined) ? `&Day=${filter.day}` : '' }`, {\n        signal: abortController.signal,\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nconst getPercentLearnt = (abortController: AbortController) => {\n    return fetch(`${baseEndpoint}/percent-learnt`, {\n        signal: abortController.signal,\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nconst getSuccessRate = (filter : SuccessRateQueryFilter,abortController: AbortController) => {\n    const query = `?Year=${filter.year}` \n        + `${(filter.month !== undefined) ? `&Month=${filter.month}` : '' }`\n        + `${(filter.day !== undefined) ? `&Day=${filter.day}` : '' }`\n        + `${(filter.difficulty !== Difficulty.NOTDEFINED) ? `&Difficulty=${filter.difficulty}` : '' }`\n    return fetch(`${baseEndpoint}/success-rate${query}`, {\n        signal: abortController.signal,\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    })\n}\n\nexport {\n    getUseOfTheApp,\n    getBestStreak,\n    getCurrentStreak,\n    getNumberOfLearntWords,\n    getPercentLearnt,\n    getSuccessRate\n}","import { useCallback, useEffect, useState } from 'react'\nimport { Paper, Typography } from '@mui/material'\nimport { useAppDispatch } from '../../redux/hooks'\nimport * as StatsApi from '../../api/stats'\nimport { setErrors } from '../../redux/dashboard/dashboardSlice'\n\nexport const BestStreak = () => {\n  const dispatch = useAppDispatch()\n  const [stat, setStat] = useState<number>(0)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n\n  const getStat = useCallback(async (abortController: AbortController) => {\n    const response = await StatsApi.getBestStreak(abortController)\n    return response\n  }, [])\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    setIsLoading(true)\n    const fetchStat = async () => {\n      getStat(abortController)\n        .then( async (result) => {\n          if (!result.ok)\n          {\n            const error = (result.status === 401) \n              ? 'Your session has expired. Login again.'\n              : 'Something went wrong'\n            dispatch(setErrors([error]))\n            return\n          }\n\n          const body = await result.json()\n          setStat(body.stat)\n          setIsLoading(false)\n        })\n        .catch( () => {\n          if (abortController.signal.aborted) return\n          dispatch(setErrors(['Something went wrong']))\n        })\n    }\n\n    fetchStat()\n\n    return () => {\n      abortController.abort()\n    }\n  }, [dispatch, getStat, stat])\n\n  return (\n    <Paper elevation={3} sx={{ padding: 3 }}>\n      <Typography variant='h4' component='h2'>Best streak: { (isLoading)? '...' : stat }</Typography>\n    </Paper>\n  )\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Paper, Typography } from '@mui/material'\nimport { useAppDispatch } from '../../redux/hooks'\nimport * as StatsApi from '../../api/stats'\nimport { setErrors } from '../../redux/dashboard/dashboardSlice'\n\nexport const CurrentStreak = () => {\n  const dispatch = useAppDispatch()\n  const [stat, setStat] = useState<number>(0)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n\n  const getStat = useCallback(async (abortController: AbortController) => {\n    const response = await StatsApi.getCurrentStreak(abortController)\n    return response\n  }, [])\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    setIsLoading(true)\n    const fetchStat = async () => {\n      getStat(abortController)\n        .then( async (result) => {\n          if (!result.ok)\n          {\n            const error = (result.status === 401) \n              ? 'Your session has expired. Login again.'\n              : 'Something went wrong'\n            dispatch(setErrors([error]))\n            return\n          }\n\n          const body = await result.json()\n          setStat(body.stat)\n          setIsLoading(false)\n        })\n        .catch( () => {\n          if (abortController.signal.aborted) return\n          dispatch(setErrors(['Something went wrong']))\n        })\n    }\n\n    fetchStat()\n\n    return () => {\n      abortController.abort()\n    }\n  }, [dispatch, getStat, stat])\n\n  return (\n    <Paper elevation={3} sx={{ padding: 3 }}>\n      <Typography variant='h4' component='h2'>Current streak: { (isLoading) ? '...' : stat }</Typography>\n    </Paper>\n  )\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Box, CircularProgress, Paper, Typography } from '@mui/material'\nimport { useAppDispatch } from '../../redux/hooks'\nimport * as StatsApi from '../../api/stats'\nimport { setErrors } from '../../redux/dashboard/dashboardSlice'\nimport { PieChart } from 'react-minimal-pie-chart'\n\nfunction getGreenToRed(percent : number){\n  const r = percent<50 ? 255 : Math.floor(255-(percent*2-100)*255/100);\n  const g = percent>50 ? 255 : Math.floor((percent*2)*255/100);\n  return 'rgb('+r+','+g+',0)';\n}\n\nexport const PercentLearnt = () => {\n  const dispatch = useAppDispatch()\n  const [stat, setStat] = useState<number>(0)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n\n  const getStat = useCallback(async (abortController: AbortController) => {\n    const response = await StatsApi.getPercentLearnt(abortController)\n    return response\n  }, [])\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    setIsLoading(true)\n\n    const fetchStat = async () => {\n      getStat(abortController)\n        .then( async (result) => {\n          if (!result.ok)\n          {\n            const error = (result.status === 401) \n              ? 'Your session has expired. Login again.'\n              : 'Something went wrong'\n            dispatch(setErrors([error]))\n            return\n          }\n\n          const body = await result.json()\n          setStat(body.stat)\n          setIsLoading(false)\n        })\n        .catch( () => {\n          if (abortController.signal.aborted) return\n          dispatch(setErrors(['Something went wrong']))\n        })\n    }\n\n    fetchStat()\n\n    return () => {\n      abortController.abort()\n    }\n  }, [dispatch, getStat, stat])\n\n  return (\n    <Paper elevation={3} sx={{ padding: 3 }}>\n      <Typography variant='h4' component='h2'>Percent learnt</Typography>\n\n      <Box sx={{ display: 'flex', justifyContent: 'center'}} >\n        {\n          (isLoading) ? (\n            <Box sx={{ height: 200, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <PieChart\n              data={[{ value: Math.round(stat), color: getGreenToRed(stat) }]}\n              style={{\n                width: '200px'\n              }}\n              totalValue={100}\n              lineWidth={20}\n              label={({ dataEntry }) => Math.round(dataEntry.percentage) + '%'}\n              labelStyle={{\n                fontSize: '25px',\n                fontFamily: 'sans-serif',\n                fill: getGreenToRed(stat),\n              }}\n              labelPosition={0}\n            />\n          )\n        }\n      </Box>\n    </Paper>\n  )\n}\n","\nexport enum AnswerType {\n    ERROR, SUCCESS, DEFAULT\n}","import { useCallback, useEffect, useState } from 'react'\nimport { Box, CircularProgress, FormControl, FormControlLabel, FormLabel, Paper, Radio, RadioGroup, Typography } from '@mui/material'\nimport { useAppDispatch } from '../../redux/hooks'\nimport * as StatsApi from '../../api/stats'\nimport { setErrors } from '../../redux/dashboard/dashboardSlice'\nimport { SuccessRateQueryFilter } from '../../models/queryFilters'\nimport { Difficulty } from '../../models/test'\nimport { PieChart } from 'react-minimal-pie-chart'\n\ninterface Filter {\n  temporal: 'year' | 'month' | 'day',\n  value: SuccessRateQueryFilter\n}\nexport const SuccessRate = () => {\n  const dispatch = useAppDispatch()\n  const [stat, setStat] = useState<number>(0)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const [apiFilter, setApiFilter] = useState<Filter>({\n    temporal: 'year',\n    value: { year: new Date().getFullYear(), difficulty: Difficulty.NOTDEFINED }\n  })\n\n  const onChangeFilterTemporal = (event: React.ChangeEvent<HTMLInputElement>, value : any) => {\n    let newApiFilter : Filter = {\n      temporal: 'year',\n      value: { year: new Date().getFullYear() }\n    }\n\n    switch(value) {\n      case 'day': \n          newApiFilter = {\n              temporal: 'day',\n              value: {\n                  ...newApiFilter.value,\n                  difficulty: apiFilter.value.difficulty,\n                  month: new Date().getMonth() + 1,\n                  day: new Date().getDate()\n              }\n          }\n          break;\n      case 'month': \n          newApiFilter = {\n              temporal: 'month',\n              value: {\n                  ...newApiFilter.value,\n                  difficulty: apiFilter.value.difficulty,\n                  month: new Date().getMonth() + 1\n              }\n          }\n          break;\n      case 'year':\n          newApiFilter = {\n              temporal: 'year',\n              value: {\n                  ...newApiFilter.value,\n                  difficulty: apiFilter.value.difficulty,\n              }\n          }\n          break;\n  }\n\n    setApiFilter(newApiFilter)\n    setIsLoading(true)\n  }\n\n  const onChangeFilterDifficulty = (event: React.ChangeEvent<HTMLInputElement>, value: string) => {\n    setApiFilter({\n      ...apiFilter,\n      value: {\n        ...apiFilter.value,\n        difficulty: value as Difficulty\n      }\n    })\n    setIsLoading(true)\n  }\n\n  const getStat = useCallback(async (abortController: AbortController) => {\n    const response = await StatsApi.getSuccessRate(apiFilter.value, abortController)\n    return response\n  }, [apiFilter])\n\n  useEffect(() => {\n    const abortController = new AbortController()\n\n    const fetchStat = async () => {\n      getStat(abortController)\n        .then( async (result) => {\n          if (!result.ok)\n          {\n            const error = (result.status === 401) \n              ? 'Your session has expired. Login again.'\n              : 'Something went wrong'\n            dispatch(setErrors([error]))\n            return\n          }\n\n          const body = await result.json()\n          setStat(body.stat * 100.0)\n          setIsLoading(false)\n        })\n        .catch( () => {\n          if (abortController.signal.aborted) return\n          dispatch(setErrors(['Something went wrong']))\n        })\n    }\n\n    fetchStat()\n\n    return () => {\n      abortController.abort()\n    }\n  }, [dispatch, getStat])\n\n    return (\n      <Paper elevation={3} sx={{ padding: 3 }}>\n          <Typography variant='h4' component='h2'>Success Rate: { isLoading ? '...' :  `${Math.round(stat)} %` }</Typography>\n\n          <Box sx={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n            <FormControl>\n                <FormLabel>Filter by difficulty</FormLabel>\n                <RadioGroup value={apiFilter.value.difficulty} onChange={onChangeFilterDifficulty}>\n                    <FormControlLabel value={Difficulty.NOTDEFINED} control={<Radio />} label='None' />\n                    <FormControlLabel value={Difficulty.EASY} control={<Radio />} label='Easy' />\n                    <FormControlLabel value={Difficulty.MEDIUM} control={<Radio />} label='Medium' />\n                    <FormControlLabel value={Difficulty.HARD} control={<Radio />} label='Hard' />\n                </RadioGroup>\n            </FormControl>\n\n            <FormControl>\n                <FormLabel>Filter by time</FormLabel>\n                <RadioGroup value={apiFilter.temporal} onChange={onChangeFilterTemporal}>\n                    <FormControlLabel value='day' control={<Radio />} label='Day' />\n                    <FormControlLabel value='month' control={<Radio />} label='Month' />\n                    <FormControlLabel value='year' control={<Radio />} label='Year' />\n                </RadioGroup>\n            </FormControl>\n          </Box>\n          \n          <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n            {\n              (isLoading)\n              ? (\n                <Box sx={{ height: 150, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                  <CircularProgress />\n                </Box>\n              )\n              : (\n                <PieChart\n                  style={{\n                    height: 150,\n                    padding: 5\n                  }}\n                  label={({ dataEntry }) => Math.round(dataEntry.percentage) + '%'}\n                  radius={42}\n                  labelPosition={112}\n                  data={[\n                    { title: 'Success', value: stat, color: 'green' },\n                    { title: 'Fail', value: (100.0 - stat), color: 'red' }\n                  ]}\n                />\n              )\n            }\n            \n          </Box>\n    </Paper>\n  )\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { CircularProgress, Paper, Typography } from '@mui/material'\nimport { useAppDispatch } from '../../redux/hooks'\nimport * as StatsApi from '../../api/stats'\nimport { setErrors } from '../../redux/dashboard/dashboardSlice'\nimport Calendar from 'react-calendar'\nimport { UseOfTheAppQueryFilter } from '../../models/queryFilters'\nimport 'react-calendar/dist/Calendar.css'\nimport './calendar.css'\n\nexport const UseOfTheApp = () => {\n  const dispatch = useAppDispatch()\n  const [stat, setStat] = useState<number[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const [queryFilter, setQueryFilter] = useState<UseOfTheAppQueryFilter>({\n      year: new Date().getFullYear(),\n      month: new Date().getMonth() + 1\n  })\n\n  const handleViewChange = (e : any) => {\n    if (e.view !== 'month') return \n    \n    const date = e.activeStartDate as Date\n    const month = date.getMonth() + 1\n    const year = date.getFullYear()\n    setStat([])\n    setQueryFilter({\n        month, year\n    })\n  }\n\n  const getStat = useCallback(async (queryFilter : UseOfTheAppQueryFilter, abortController: AbortController) => {\n    const response = await StatsApi.getUseOfTheApp(queryFilter, abortController)\n    return response\n  }, [])\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    setIsLoading(true)\n    const fetchStat = async () => {\n      getStat(queryFilter, abortController)\n        .then( async (result) => {\n          if (!result.ok)\n          {\n            const error = (result.status === 401) \n              ? 'Your session has expired. Login again.'\n              : 'Something went wrong'\n            dispatch(setErrors([error]))\n            return\n          }\n\n          const body = await result.json()\n          setStat(body.stat)\n          setIsLoading(false)\n        })\n        .catch( () => {\n          if (abortController.signal.aborted) return\n          dispatch(setErrors(['Something went wrong']))\n        })\n    }\n\n    fetchStat()\n\n    return () => {\n      abortController.abort()\n    }\n  }, [dispatch, getStat, queryFilter])\n\n  return (\n    <Paper elevation={3} sx={{ padding: 3 }}>\n        <Typography variant='h4' component='h2'>Use of the app</Typography>\n        {\n          (isLoading) && <CircularProgress />\n        }\n        <Calendar \n            maxDate={new Date()}\n            onActiveStartDateChange={handleViewChange}\n            tileClassName={({ date, view }) => {\n                return (\n                    view === 'month' && \n                    stat.includes(date.getDate())\n                ) ? 'calendar__day__used' : null \n            }}\n        />\n    </Paper>\n  )\n}\n","import { Box, Container, Grid, Typography } from '@mui/material'\nimport { BestStreak } from '../../components/stats/BestStreak'\nimport { CurrentStreak } from '../../components/stats/CurrentStreak'\nimport { NewWordsLearnt } from '../../components/stats/NewWordsLearnt'\nimport { PercentLearnt } from '../../components/stats/PercentLearnt'\nimport { SuccessRate } from '../../components/stats/SuccessRate'\nimport { UseOfTheApp } from '../../components/stats/UseOfTheApp'\n\nexport const StatsScreen = () => {\n  return (\n    <Container component='main' sx={{marginBottom: 3 }}>\n      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <Typography variant='h3' component='h1' sx={{ marginBottom: 3 }}>My stats</Typography>\n\n        <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n          <Grid item xs={12} sm={4} md={4}><PercentLearnt /></Grid>\n          <Grid item xs={12} sm={4} md={4}><CurrentStreak /></Grid>\n          <Grid item xs={12} sm={4} md={4}><BestStreak /></Grid>\n          <Grid item xs={12} sm={4} md={4}><UseOfTheApp /></Grid>\n          <Grid item xs={12} sm={4} md={4}><NewWordsLearnt /></Grid>\n          <Grid item xs={12} sm={4} md={4}><SuccessRate /></Grid>\n        </Grid>\n      </Box>\n    </Container>\n  )\n}\n","import { ReactNode } from 'react'\nimport { Field, FieldInputProps } from 'formik'\nimport InputLabel from '@mui/material/InputLabel'\nimport MenuItem from '@mui/material/MenuItem'\nimport FormHelperText from '@mui/material/FormHelperText'\nimport FormControl from '@mui/material/FormControl'\nimport Select from '@mui/material/Select'\n\nexport interface FormikSelectItem {\n  label: string\n  value: string\n}\n\ninterface FormikSelectProps {\n  name: string\n  items: FormikSelectItem[]\n  label: string\n  required?: boolean,\n  touched?: boolean,\n  errorText?: string\n}\n\ninterface MaterialUISelectFieldProps extends FieldInputProps<string> {\n  children: ReactNode\n  label: string\n  required: boolean,\n  hasError: boolean,\n  errorText: string\n}\n\nconst MaterialUISelectField = ({\n  hasError,\n  label,\n  children,\n  value,\n  name,\n  onChange,\n  onBlur,\n  required,\n  errorText\n}: MaterialUISelectFieldProps) => {\n  return (\n    <FormControl \n        fullWidth\n        margin='normal'\n        error={hasError}\n    >\n        <InputLabel required={required}>\n            {label}\n        </InputLabel>\n        <Select name={name} onChange={onChange} onBlur={onBlur} value={value} label={`${label} *`}>\n            {children}\n        </Select>\n        {\n            hasError && (\n                <FormHelperText>{ errorText }</FormHelperText>\n            )\n        }\n    </FormControl>\n  )\n}\n\nexport const FormikSelect = ({ \n    name, \n    items, \n    label, \n    required,\n    touched,\n    errorText,\n    ...rest\n} : FormikSelectProps) => {\n    return (\n        <div>\n        <Field\n            { ...rest }\n            name={name}\n            as={MaterialUISelectField}\n            label={label}\n            hasError={errorText !== undefined && touched}\n            errorText={errorText}\n            helperText={touched && errorText}\n            required={required}\n        >\n            {items.map(item => (\n            <MenuItem key={item.value} value={item.value}>\n                {item.label}\n            </MenuItem>\n            ))}\n        </Field>\n        </div>\n    )\n}\n","\nexport const initialValues = {\n    testType: '',\n    difficulty: '',\n    numberOfQuestions: 5\n}","import * as Yup from 'yup'\n\nexport const testSchema = Yup.object().shape({\n    testType: Yup.string().required('Required'),\n    difficulty: Yup.string().required('Required'),\n    numberOfQuestions: Yup.number().required('Required')\n})","import { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Form, Formik } from 'formik'\nimport { LoadingButton } from '@mui/lab'\nimport { Box, Container, Typography } from '@mui/material'\nimport { FormikSelect } from '../../../components/formik/FormikSelect'\nimport { initialValues, testSchema as validationSchema } from '../../../helpers/create-test'\nimport { testTypeToString } from '../../../helpers/testType'\nimport { TestType, Difficulty } from '../../../models/test'\nimport { difficultyToString } from '../../../helpers/difficulty'\nimport { FormikField } from '../../../components/formik'\nimport { TestCreate } from '../../../models/test/testCreate'\nimport * as TestActions from '../../../api/test'\nimport { useAppDispatch } from '../../../redux/hooks'\nimport { setErrors } from '../../../redux/dashboard/dashboardSlice'\n\nconst testTypes = Object.entries(TestType).map(([key]) => {\n  const label = testTypeToString(key as TestType)\n  return ({\n    label,\n    value: key\n  })\n})\n\nconst difficulties = Object.entries(Difficulty).filter(d => d[1] !== Difficulty.NOTDEFINED).map(([key]) => {\n  const label = difficultyToString(key as Difficulty)\n  return ({\n    label,\n    value: key\n  })\n})\n\nexport const TestCreateScreen = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const dispatch = useAppDispatch()\n  const navigate = useNavigate()\n\n  const handleSubmit = (values: TestCreate) : void => {\n    setIsLoading(true)\n    TestActions.createTest(values)\n      .then( async (result) => {\n        const body = await result.json()\n        setIsLoading(false)\n\n        if (!result.ok)\n        {\n          const errors = (result.status === 401) \n            ? ['Your session has expired. Login again.']\n            : body.errors\n          dispatch(setErrors(errors))\n          return\n        }\n\n        navigate(`/test/do/${body.guid}`)\n      })\n      .catch(() => {\n        setIsLoading(false)\n        dispatch(setErrors(['Something went wrong']))\n      })\n  }\n\n  return (\n    <Container component='main'>\n      <Box\n          sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n          }}\n      >\n        <Typography variant='h3' component='h1'>Start a new test</Typography>\n\n        <Box sx={{ \n            mt: 1, \n            maxWidth: 0.7,\n            width: 400\n        }}>\n          <Formik \n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            validationSchema={validationSchema}\n          >\n            {({isValid, dirty, errors, touched}) => (\n              <Form>\n                <div>\n                  <FormikSelect\n                    name='testType'\n                    label='Test type'\n                    items={testTypes}\n                    touched={touched.testType}\n                    errorText={errors.testType}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <FormikSelect\n                      name='difficulty'\n                      label='Difficulty'\n                      items={difficulties}\n                      touched={touched.difficulty}\n                      errorText={errors.difficulty}\n                      required\n                  />\n                </div>\n\n                <div>\n                  <FormikField\n                    fullWidth\n                    name='numberOfQuestions'\n                    label='Number of questions'\n                    touched={touched.numberOfQuestions}\n                    errorText={errors.numberOfQuestions}\n                    type='number'\n                    margin='normal'\n                    InputProps={{\n                      inputProps: {\n                        min: 1,\n                        max: 15,\n                        step: 1\n                      }\n                    }}\n                    required\n                  />\n                </div>\n\n                <LoadingButton \n                  variant='contained'\n                  fullWidth\n                  disabled={!dirty || !isValid}\n                  sx={{ mt: 3, mb: 2 }}\n                  type='submit'\n                  loading={isLoading}\n                >\n                  Create test\n                </LoadingButton>\n              </Form>\n            )}\n          </Formik>\n        </Box>\n      </Box>\n    </Container>\n  )\n}\n","\nexport const fetchVideoAndSet = (url : string, token : string, ref : React.RefObject<HTMLVideoElement>) => {\n    fetch(url, { method: 'GET', headers: { Authorization: `Bearer ${token}` }})\n            .then(res => res.blob())\n            .then((blob) => { if(ref.current !== null) ref.current.src = URL.createObjectURL(blob) })\n            .catch(() => {})\n}","\nexport const answerToLabel = (allAnswers : string[], answer? : string) : string | null =>  {\n    if (!answer) return null\n\n    const index = allAnswers.indexOf(answer as string)\n    \n    switch(index){\n        case 0: \n            return 'A'\n        case 1: \n            return 'B'\n        case 2: \n            return 'C'\n        case 3: \n            return 'D'\n        default: \n            return null\n    }\n}","import { AnswerType } from '.'\n\nexport const typeToColor = (type : AnswerType) => {\n    switch(type) {\n        case AnswerType.ERROR:\n            return 'red'\n        case AnswerType.SUCCESS:\n            return 'green'\n        case AnswerType.DEFAULT:\n            return 'default'\n    }\n}","import { Box, Card, CardActionArea, SxProps } from '@mui/material'\nimport Radio from '@mui/material/Radio'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport { AnswerType, typeToColor, typeToRadioColor } from '../../helpers/test'\n\nconst width = '320'\nconst height = '240'\n\ninterface CardProps {\n    variant?: 'outlined',\n    sx?: SxProps\n}\n\nexport const VideoAnswer = ({handleOnChange, refAnswer, label, type} : any) => {\n    const isOutlined = !(type === AnswerType.DEFAULT)\n    const cardColor = typeToColor(type)\n    const radioColor = typeToRadioColor(type)\n    const props : CardProps = (isOutlined)\n    ? {\n        variant: 'outlined',\n        sx: {border: '2px solid', borderColor: cardColor, padding: 1}\n    }\n    : { \n        sx: {padding: 1}\n    }\n\n    return (\n        <Card {...props}>\n            <CardActionArea onClick={() => { handleOnChange({}, label) }}>\n                <FormControlLabel  \n                    value={label} label={label}\n                    control={<Radio color={radioColor}/>} \n                />\n            </CardActionArea>\n            <Box sx={{ display: 'flex', justifyContent: 'center'}}>\n                <video width={width} height={height} ref={refAnswer} controls />\n            </Box>\n        </Card>\n    )\n}","import { AnswerType } from '.'\n\nexport const typeToRadioColor = (type : AnswerType) => {\n    switch(type) {\n        case AnswerType.DEFAULT: \n            return 'default'\n        case AnswerType.ERROR:\n            return 'error'\n        case AnswerType.SUCCESS:\n            return 'success'\n    }\n}","import { useEffect, useMemo, useRef, useState } from 'react'\nimport { QuestionOptionWordToVideo as QuestionModel } from '../../models/test'\nimport { useAppSelector } from '../../redux/hooks'\nimport { Box, Grid, Typography } from '@mui/material'\nimport RadioGroup from '@mui/material/RadioGroup'\nimport FormControl from '@mui/material/FormControl'\nimport {\n    computeTypeOptionWordToVideo as computeType, \n    fetchVideoAndSet \n} from '../../helpers/test'\nimport { VideoAnswer } from './VideoAnswer'\n\ninterface QuestionOptionWordToVideoProps {\n    question: QuestionModel,\n    editable: boolean,\n    setCurrentAnswer: Function\n}\n\nexport const QuestionOptionWordToVideo = ({ setCurrentAnswer, question, editable } : QuestionOptionWordToVideoProps) => {\n    const { token } = useAppSelector(state => state.auth.user)\n    const questions = useMemo(() => (\n        [\n            question.possibleAnswer0, \n            question.possibleAnswer1, \n            question.possibleAnswer2, \n            question.possibleAnswer3\n        ])\n    , [question])\n    const [value, setValue] = useState<string>(question.userAnswer ?? '')\n    const refPossibleAnswer0 = useRef<HTMLVideoElement>(null)\n    const refPossibleAnswer1 = useRef<HTMLVideoElement>(null)\n    const refPossibleAnswer2 = useRef<HTMLVideoElement>(null)\n    const refPossibleAnswer3 = useRef<HTMLVideoElement>(null)\n\n    useEffect(() => {\n        fetchVideoAndSet(question.possibleAnswer0, token ?? '', refPossibleAnswer0)\n        fetchVideoAndSet(question.possibleAnswer1, token ?? '', refPossibleAnswer1)\n        fetchVideoAndSet(question.possibleAnswer2, token ?? '', refPossibleAnswer2)\n        fetchVideoAndSet(question.possibleAnswer3, token ?? '', refPossibleAnswer3)\n    },[question, token])\n\n    useEffect(() => {\n        setValue(question.userAnswer ?? '')\n    }, [question, questions])\n\n    const handleOnChange = (ev : any, value : string) => {\n        if (editable) {\n            setValue(value)\n            setCurrentAnswer(value)\n        }\n    }\n\n    const handleComputeType = (label : string ) => {\n        return computeType(label, editable, question, questions)\n    }\n\n    return (\n        <Box sx={{ width: '80%' }}>\n            <Typography variant='h5' component='h2' sx={{ alignSelf: 'flex-start', marginBottom: 3}}>\n                Guess: '{ question?.wordToGuess ?? '' }'\n            </Typography>\n\n            <FormControl>\n                <RadioGroup value={value} onChange={handleOnChange}>\n                    <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                        <Grid item xs={4} sm={4} md={6}>\n                            <VideoAnswer \n                                handleOnChange={() => handleOnChange({}, 'A')}\n                                refAnswer={refPossibleAnswer0}\n                                label='A'\n                                type={handleComputeType('A')}\n                            />\n                        </Grid>\n                        <Grid item xs={4} sm={4} md={6}>\n                            <VideoAnswer \n                                handleOnChange={() => handleOnChange({}, 'B')}\n                                refAnswer={refPossibleAnswer1}\n                                label='B'\n                                type={handleComputeType('B')}\n                            />\n                        </Grid>\n                        <Grid item xs={4} sm={4} md={6}>\n                            <VideoAnswer \n                                handleOnChange={() => handleOnChange({}, 'C')}\n                                refAnswer={refPossibleAnswer2}\n                                label='C'\n                                type={handleComputeType('C')}\n                            />\n                        </Grid>\n                        <Grid item xs={4} sm={4} md={6}>\n                            <VideoAnswer \n                                handleOnChange={() => handleOnChange({}, 'D')}\n                                refAnswer={refPossibleAnswer3}\n                                label='D'\n                                type={handleComputeType('D')}\n                            />\n                        </Grid>\n                    </Grid>\n                </RadioGroup>\n            </FormControl>\n        </Box>\n    )\n}\n","import {\n    QuestionOptionVideoToWord, \n    QuestionOptionWordToVideo\n} from '../../models/test'\nimport { answerToLabel } from './answerToLabel'\nimport { AnswerType } from './AnswerType'\n\nexport const computeTypeOptionWordToVideo = (label : string, editable : boolean, question : QuestionOptionWordToVideo, questions : string[]) => {\n    if (editable) {\n        return AnswerType.DEFAULT\n    }\n\n    const answerLabel = answerToLabel(questions, question.correctAnswer)\n    const userLabel   = question.userAnswer\n\n    if (label === answerLabel){\n        return AnswerType.SUCCESS\n    }\n    \n    return (label === userLabel) ? AnswerType.ERROR : AnswerType.DEFAULT\n}\n\nexport const computeTypeOptionVideoToWord = (label : string, editable : boolean, question : QuestionOptionVideoToWord, questions : string[]) => {\n    if (editable) {\n        return AnswerType.DEFAULT\n    }\n\n    const answerLabel = question.correctAnswer\n    const userLabel = question.userAnswer\n\n    if (label === answerLabel){\n        return AnswerType.SUCCESS\n    }\n\n    return (label === userLabel) ? AnswerType.ERROR : AnswerType.DEFAULT\n}","import { Box, FormControl, FormControlLabel, Grid, Paper, Radio, RadioGroup, Typography } from '@mui/material'\nimport { useEffect, useMemo, useRef, useState } from 'react'\nimport { fetchVideoAndSet } from '../../helpers/test'\nimport { QuestionOptionVideoToWord as QuestionModel } from '../../models/test'\nimport { useAppSelector } from '../../redux/hooks'\nimport { computeTypeOptionVideoToWord as computeType } from '../../helpers/test'\nimport { typeToColor } from '../../helpers/test/typeToColor';\n\nconst width = '320'\nconst height = '240'\n\ninterface QuestionOptionVideoToWordProps {\n  question: QuestionModel,\n  editable: boolean,\n  setCurrentAnswer: Function\n}\n\nexport const QuestionOptionVideoToWord = ({\n  question, editable, setCurrentAnswer\n} : QuestionOptionVideoToWordProps) => {\n    const { token } = useAppSelector(state => state.auth.user)\n    const [value, setValue] = useState<string>(question.userAnswer ?? '')\n    const questions = useMemo(() => (\n        [\n            question.possibleAnswer0, \n            question.possibleAnswer1, \n            question.possibleAnswer2, \n            question.possibleAnswer3\n        ])\n    , [question])\n    const refVideo = useRef<HTMLVideoElement>(null)\n\n    useEffect(() => {\n        fetchVideoAndSet(question.videoToGuess, token ?? '', refVideo)\n    },[question, token])\n\n    useEffect(() => {\n      setValue(question.userAnswer ?? '')\n  }, [question, questions])\n\n    const handleOnChange = (ev : any, value : string) => {\n        if (editable) {\n          setValue(value)\n          setCurrentAnswer(value)\n        }\n    }\n\n    const getColor = (label : string) => {\n      const type = computeType(label, editable, question, questions)\n      const color = typeToColor(type)\n      return color\n    }\n\n    return (\n      <Box sx={{ width: '80%' }}>\n            <Typography variant='h5' component='h2' sx={{ alignSelf: 'flex-start', marginBottom: 3}}>\n                To guess:\n            </Typography>\n\n            <Box sx={{ marginBottom: 3, alignSelf: 'flex-start' }}>\n              <video width={width} height={height} ref={refVideo} controls />\n            </Box>\n\n            <FormControl sx={{ display: 'flex', justifyContent: 'center'}}>\n              <RadioGroup value={value} onChange={handleOnChange}>\n                <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                  <Grid item xs={4} sm={4} md={6}>\n                    <Paper variant='outlined' sx={{borderColor: getColor(question.possibleAnswer0), padding: 1}}>\n                      <FormControlLabel\n                        value={question.possibleAnswer0} \n                        control={<Radio />} \n                        label={question.possibleAnswer0} \n                      />\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={4} sm={4} md={6}>\n                    <Paper variant='outlined' sx={{borderColor: getColor(question.possibleAnswer1), padding: 1}}>\n                      <FormControlLabel\n                        value={question.possibleAnswer1} \n                        control={<Radio />} \n                        label={question.possibleAnswer1} \n                      />\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={4} sm={4} md={6}>\n                    <Paper variant='outlined' sx={{borderColor: getColor(question.possibleAnswer2), padding: 1}}>\n                      <FormControlLabel\n                        value={question.possibleAnswer2} \n                        control={<Radio />} \n                        label={question.possibleAnswer2} \n                      />\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={4} sm={4} md={6}>\n                    <Paper variant='outlined' sx={{borderColor: getColor(question.possibleAnswer3), padding: 1}}>\n                      <FormControlLabel\n                        value={question.possibleAnswer3} \n                        control={<Radio />} \n                        label={question.possibleAnswer3} \n                      />\n                    </Paper>\n                  </Grid>\n                </Grid>\n              </RadioGroup>\n            </FormControl>\n        </Box>\n    )\n}\n","import { Box, Typography, ToggleButton, ToggleButtonGroup } from '@mui/material'\nimport { useEffect, useRef, useState } from 'react'\nimport { fetchVideoAndSet } from '../../helpers/test'\nimport { QuestionMimic as QuestionModel } from '../../models/test'\nimport { useAppSelector } from '../../redux/hooks'\nimport VideoRecorder from 'react-video-recorder'\n\nconst width = '320'\nconst height = '240'\n\ninterface QuestionMimicProps {\n  question: QuestionModel,\n  editable: boolean,\n  setCurrentAnswer: Function\n}\n\nconst baseOptions = {\n  constraints : {\n    audio: false,\n    video: true\n  },\n  \n  timeLimit: 7000\n}\n\nconst recordOptions = {\n  ...baseOptions,\n  isOnInitially: true,\n  isFlipped: true\n}\n\nconst uploadOptions = {\n  ...baseOptions,\n  useVideoInput: true\n}\n\nexport const QuestionMimic = ({\n  question, editable, setCurrentAnswer\n} : QuestionMimicProps) => {\n    const { token } = useAppSelector(state => state.auth.user)\n    const [option, setOption] = useState<string>('Record')\n    const refVideoHelp = useRef<HTMLVideoElement>(null)\n    const refVideoUser = useRef<HTMLVideoElement>(null)\n    const refVideoRecorder = useRef<any>(null)\n\n    useEffect(() => {\n        fetchVideoAndSet(question.videoHelp ?? '', token ?? '', refVideoHelp)\n        fetchVideoAndSet(question.videoUser ?? '', token ?? '', refVideoUser)\n    },[question.videoHelp, question.videoUser, token, editable])\n\n    const onRecordingComplete = (videoBlob: Blob) => {\n      const file = new File([videoBlob], `${question.id}.mp4`)\n      setCurrentAnswer(file)\n    }\n\n    useEffect(() => {\n      if(!refVideoRecorder.current || question.videoUser) return\n      \n      refVideoRecorder.current.handleStopReplaying()\n    }, [refVideoRecorder, question])\n\n    return (\n        <Box sx={{ width: '80%' }}>\n            <Box sx={{ alignSelf: 'flex-start', marginBottom: 3}}>\n              <Typography variant='h5' component='h2'>\n                  Try signing: '{ question?.wordToGuess ?? '' }'\n              </Typography>\n\n              <p>Help video</p>\n              <video width={width} height={height} ref={refVideoHelp} controls />\n            </Box>\n\n            <Box sx={{ marginTop: 3 }}>\n            {\n              (editable) \n              ? (\n                \n                <div>\n\n                  {\n                    question.videoUser && (\n                      <div>\n                        <p>Your current video</p>\n                        <video width={width} height={height} ref={refVideoUser} controls />\n                      </div>\n                    )\n                  }\n\n                  <ToggleButtonGroup\n                    color=\"primary\"\n                    value={option}\n                    exclusive\n                    onChange={(e, value) => setOption(value)}\n                  >\n                    <ToggleButton value=\"Record\">Record</ToggleButton>\n                    <ToggleButton value=\"Upload\">Upload</ToggleButton>\n                  </ToggleButtonGroup>\n\n                  <div style={{ width: `${width}px` }}>\n                    { (option === 'Record') \n                      ? \n                        <>\n                          <VideoRecorder\n                            ref={refVideoRecorder}\n                            {...recordOptions}\n                            onRecordingComplete={onRecordingComplete}\n                          />\n                        </>\n                      : \n                        <div>\n                          <VideoRecorder\n                            {...uploadOptions}\n                            onRecordingComplete={onRecordingComplete}\n                          />\n                        </div>\n                    }\n                  </div>\n                </div>\n              )\n              : (\n                <>\n                  <p>User video</p>\n                  <video width={width} height={height} ref={refVideoUser} controls />\n\n                  <p>The sign is { (question.isCorrect) ? 'correct' : 'incorrect' }</p>\n                </>\n              )\n            }\n            </Box>\n        </Box>\n    )\n}\n","import { Box, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material'\nimport { useEffect, useRef, useState } from 'react'\nimport { fetchVideoAndSet } from '../../helpers/test'\nimport { QuestionQA as QuestionModel } from '../../models/test'\nimport { useAppSelector } from '../../redux/hooks'\nimport VideoRecorder from 'react-video-recorder'\n\nconst width = '320'\nconst height = '240'\n\ninterface QuestionQAProps {\n  question: QuestionModel,\n  editable: boolean,\n  setCurrentAnswer: Function\n}\n\nconst baseOptions = {\n  constraints : {\n    audio: false,\n    video: true\n  },\n  timeLimit: 7000\n}\n\nconst recordOptions = {\n  ...baseOptions,\n  isOnInitially: true,\n  isFlipped: true\n}\n\nconst uploadOptions = {\n  ...baseOptions,\n  useVideoInput: true\n}\n\nexport const QuestionQA = ({\n  question, editable, setCurrentAnswer\n} : QuestionQAProps) => {\n    const { token } = useAppSelector(state => state.auth.user)\n    const [option, setOption] = useState<string>('Record')\n    const refVideo = useRef<HTMLVideoElement>(null)\n    const refVideoRecorder = useRef<any>(null)\n\n    useEffect(() => {\n      fetchVideoAndSet(question.videoUser ?? '', token ?? '', refVideo)\n    },[question, token])\n\n    useEffect(() => {\n      if(!refVideoRecorder.current || question.videoUser) return\n      \n      refVideoRecorder.current.handleStopReplaying()\n    }, [refVideoRecorder, question])\n\n    const onRecordingComplete = (videoBlob: Blob) => {\n      const file = new File([videoBlob], `${question.id}.mp4`)\n      setCurrentAnswer(file)\n    }\n\n    return (\n        <Box sx={{ width: '80%' }}>\n            <Typography variant='h5' component='h2' sx={{ alignSelf: 'flex-start', marginBottom: 3}}>\n                Guess: '{ question?.wordToGuess ?? '' }'\n            </Typography>\n            \n            <Box sx={{ marginTop: 3 }}>\n              {\n                (editable) \n                ? (\n                  <div>\n\n                    {\n                      question.videoUser && (\n                        <div>\n                          <p>Your current video</p>\n                          <video width={width} height={height} ref={refVideo} controls />\n                        </div>\n                      )\n                    }\n\n                    <ToggleButtonGroup\n                      color=\"primary\"\n                      value={option}\n                      exclusive\n                      onChange={(e, value) => setOption(value)}\n                    >\n                      <ToggleButton value=\"Record\">Record</ToggleButton>\n                      <ToggleButton value=\"Upload\">Upload</ToggleButton>\n                    </ToggleButtonGroup>\n\n                    <div style={{ width: `${width}px` }}>\n                      { (option === 'Record') \n                        ? \n                          <>\n                            <VideoRecorder\n                              ref={refVideoRecorder}\n                              {...recordOptions}\n                              onRecordingComplete={onRecordingComplete}\n                            />\n                          </>\n                        : \n                          <div>\n                            <VideoRecorder\n                              ref={refVideoRecorder}\n                              {...uploadOptions}\n                              onRecordingComplete={onRecordingComplete}\n                            />\n                          </div>\n                      }\n                    </div>\n                  </div>\n                )\n                : (\n                  <>\n                    <video width={width} height={height} ref={refVideo} controls />\n                    <p>The sign is { (question.isCorrect) ? 'correct' : 'incorrect' }</p>\n                  </>\n                )\n              }\n            </Box>\n        </Box>\n    )\n}\n","import { Box } from '@mui/system'\nimport { Modal, Typography } from '@mui/material'\nimport { Test } from '../../models/test'\nimport { getNumberOfCorrectAnswersFromTest } from '../../helpers/test'\n\nconst style = {\n    position: 'absolute' as 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'white',\n    boxShadow: 24,\n    p: 4,\n}\n\ninterface ResultsModalProps {\n    onClose: ((event: {}, reason: \"backdropClick\" | \"escapeKeyDown\") => void) | undefined,\n    open: boolean,\n    test?: Test\n}\n\nexport const ResultsModal = ({\n    onClose, open, test\n} : ResultsModalProps) => {\n\n    const total = test?.questions.length ?? 0\n    const correct = getNumberOfCorrectAnswersFromTest(test)\n    const incorrect = total - correct\n\n    return (\n        <Modal open={open} onClose={onClose}>\n            <Box sx={style}>\n                <Typography variant=\"h2\" component=\"h2\">\n                Test results\n                </Typography>\n\n                <Typography sx={{ mt: 2 }}>\n                    <b>Total questions:</b> { total }\n                </Typography>\n                <Typography sx={{ mt: 2 }}>\n                    <b>Correct:</b> { correct }\n                </Typography>\n                <Typography sx={{ mt: 2 }}>\n                    <b>Incorrect:</b> { incorrect }\n                </Typography>\n                <Typography sx={{ mt: 2 }}>\n                    <b>Score:</b> { (100 * correct/total).toFixed() } %\n                </Typography>\n            </Box>\n        </Modal>\n    )\n}\n","import { \n    TestType,\n    QuestionQA, \n    Test, \n    QuestionOptionVideoToWord,\n    QuestionOptionWordToVideo,\n    QuestionMimic\n} from '../../models/test'\nimport { answerToLabel } from './answerToLabel'\n\nexport const getNumberOfCorrectAnswersFromTest = (test? : Test) => {\n    if (!test) return 0\n    \n    switch(test.testType){\n        case TestType.Mimic:\n        case TestType.Mimic_Error:\n            return (test.questions as QuestionMimic[]).filter(q => q.isCorrect).length\n        case TestType.QA:\n        case TestType.QA_Error:\n            return (test.questions as QuestionQA[]).filter(q => q.isCorrect).length\n        case TestType.OptionVideoToWord:\n        case TestType.OptionVideoToWord_Error:\n            return (test.questions as QuestionOptionVideoToWord[]).filter(q => q.correctAnswer === q.userAnswer).length\n        case TestType.OptionWordToVideo:\n        case TestType.OptionWordToVideo_Error:\n            return (test.questions as QuestionOptionWordToVideo[]).filter((q) => {\n                const possibleAnswers = [q.possibleAnswer0, q.possibleAnswer1, q.possibleAnswer2, q.possibleAnswer3]\n                return answerToLabel(possibleAnswers, q.correctAnswer) === q.userAnswer\n            }).length\n        default: \n            return 0\n    }\n}","import { LoadingButton } from \"@mui/lab\"\nimport { Box, Button } from \"@mui/material\"\n\ninterface NavButtonsProps {\n    editable: boolean,\n    page: number,\n    handleOnPageChange: Function,\n    testLength?: number,\n    handleStop: Function,\n    handleFinish: Function,\n    loading: boolean\n}\n\nexport const NavButtons = ({\n    editable,\n    page,\n    handleOnPageChange,\n    testLength,\n    handleStop,\n    handleFinish,\n    loading\n} : NavButtonsProps) => {\n  return (\n    <Box sx={{ marginTop: 3, display: 'flex', width: '80%', justifyContent: 'space-between'}}>\n        <Button \n            variant='outlined'\n            onClick={() => { handleOnPageChange({}, page-1) }}\n            disabled={(page)===1 || loading}\n            sx={{ mt: 3, mb: 2, padding: 1 }}\n        >\n            Previous\n        </Button>\n\n        {\n            (editable && (page)===testLength) \n            ? (\n                <>\n                    <LoadingButton\n                        variant='contained'\n                        onClick={() => handleFinish()}\n                        loading={loading}\n                        sx={{ mt: 3, mb: 2, padding: 1 }}\n                    >\n                        Send test\n                    </LoadingButton>\n                </>\n            )\n            : (\n                <>\n                    <LoadingButton\n                        variant='contained'\n                        onClick={() => { handleOnPageChange({}, page+1) }}\n                        disabled={(page)===testLength}\n                        loading={loading}\n                        sx={{ mt: 3, mb: 2, padding: 1 }}\n                    >\n                        Next\n                    </LoadingButton>\n\n                    <Button \n                        variant='contained'\n                        color='warning'\n                        onClick={() => { handleStop() }}\n                        sx={{ mt: 3, mb: 2, padding: 1 }}\n                    >\n                        Stop\n                    </Button>\n                </>\n            )\n        }\n        \n    </Box>\n  )\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { \n  Difficulty, \n  QuestionMimic as QuestionMimicModel, \n  QuestionOptionVideoToWord as QuestionOptionVideoToWordModel, \n  QuestionOptionWordToVideo as QuestionOptionWordToVideoModel, \n  QuestionQA as QuestionQAModel,\n  TestInPersistence\n} from '../../models/test'\nimport { setErrors } from '../../redux/dashboard/dashboardSlice'\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks'\nimport { getTestAsync } from '../../redux/test/actions'\nimport { PersistenceService } from '../../services/persistenceService'\nimport Pagination from '@mui/material/Pagination'\nimport { Box, Button, Chip, Divider, PaginationItem, Typography } from '@mui/material'\nimport { thunkDeleteCurrentTest, thunkSetCurrentTest, thunkSetPage } from '../../redux/test/testSlice'\nimport { testTypeToString } from '../../helpers/testType'\nimport { TestType } from '../../models/test'\nimport { difficultyToColor } from '../../helpers/difficulty'\nimport { QuestionOptionWordToVideo } from './QuestionOptionWordToVideo'\nimport { BaseQuestion } from '../../models/test/question';\nimport { QuestionOptionVideoToWord } from './QuestionOptionVideoToWord';\nimport { QuestionMimic } from './QuestionMimic'\nimport { QuestionQA } from './QuestionQA'\nimport InfoIcon from '@mui/icons-material/Info'\nimport { ResultsModal } from './ResultsModal'\nimport { NavButtons } from './NavButtons'\nimport * as TestApi from '../../api/test'\n\ninterface ITestProps {\n  editable: boolean\n} \n\ninterface Answer {\n  videoUser?: Blob,\n  userAnswer?: string\n}\n\nexport const TestComponent = ({editable} : ITestProps) => {\n  const navigate = useNavigate()\n  const { id } = useParams()\n  const dispatch = useAppDispatch()\n  const { currentTest } = useAppSelector(state => state.test)\n  const [page, setPage] = useState<number>(currentTest.page ?? 1)\n  const [open, setOpen] = useState<boolean>(false)\n  const [currentAnswer, setCurrentAnswer] = useState(null)\n  const [refTitle, setRefTitle] = useState<HTMLDivElement>()\n  const [refInfo, setRefInfo] = useState<HTMLDivElement>()\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  \n  const handleRefTitle = useCallback((node) => {\n    setRefTitle(node)\n  }, [])\n\n  const handleRefInfo = useCallback((node) => {\n    setRefInfo(node)\n  }, [])\n\n  useEffect(() => {\n    if(!refTitle || !refInfo) return\n\n    const titleWidth = refTitle.offsetWidth\n    refInfo.style.width = `${titleWidth}px`\n  }, [refInfo, refTitle, currentTest.test])\n\n  useEffect(() => {\n    return (() => {\n      dispatch(thunkDeleteCurrentTest())\n    })\n  }, [dispatch])\n\n  useEffect(() => {\n    // Only get if neccessary\n    const currentInPersistence = new PersistenceService().get('currentTest') as TestInPersistence\n    if (currentInPersistence?.test?.id === id) return\n\n    dispatch(getTestAsync({ id: id ?? '', populated: true }))\n  }, [dispatch, id])\n\n  useEffect(() => {\n    if (currentTest?.errors !== []) {\n      dispatch(setErrors(currentTest?.errors))\n    }\n  }, [dispatch, currentTest?.errors])\n\n  useEffect(() => {\n    setCurrentAnswer(null)\n  }, [page])\n  \n  const handleOpenModal = () => { setOpen(true) }\n  const handleCloseModal = () => { setOpen(false) }\n\n  const handleStop = () => {\n    navigate(-1)\n  }\n\n  const createAnswer = () => {\n    if (currentAnswer === null) return \n\n    let answer : Answer = {}\n    \n    switch(currentTest.test?.testType as TestType) {\n      case TestType.Mimic:\n      case TestType.Mimic_Error:\n      case TestType.QA:\n      case TestType.QA_Error:\n        answer = {\n          videoUser: currentAnswer\n        }\n        break;\n      case TestType.OptionVideoToWord:\n      case TestType.OptionVideoToWord_Error:\n      case TestType.OptionWordToVideo:\n      case TestType.OptionWordToVideo_Error:\n        answer = {\n          userAnswer: currentAnswer\n        }\n        break;\n    }\n\n    return answer\n  }\n\n  const sendReply = async (newPage : number) => {\n    const answer = createAnswer()\n\n    if (!answer) {\n      goToPage(newPage)\n      return\n    }\n\n    setIsLoading(true)\n    await TestApi.replyToQuestion({\n      id: currentTest.test?.questions[page-1].id ?? '', \n      testType: currentTest.test?.testType as TestType, \n      userAnswer: answer?.userAnswer,\n      videoUser: answer?.videoUser\n    })\n      .then( async (result) => {\n        if (!result.ok)\n        {\n          const error = (result.status === 401) \n            ? 'Your session has expired. Login again.'\n            : 'Something went wrong'\n          dispatch(setErrors([error]))\n          return\n        } \n        \n        const body = await result.json()\n        \n        const persistence = new PersistenceService()\n        const testInPersistence = persistence.get('currentTest') as TestInPersistence\n        const test = testInPersistence.test\n        test.questions = test.questions.map((q) => (\n          (q.id !== currentTest.test?.questions[page-1].id) \n            ? q \n            : {\n                ...q,\n                ...body\n              }\n        ))\n        \n        dispatch(thunkSetCurrentTest(test))\n        goToPage(newPage)\n      })\n      .catch( (err) => {\n        dispatch(setErrors(['Something went wrong']))\n      })\n    setIsLoading(false)\n  }\n\n  const goToPage = (page: number) => {\n    dispatch(thunkSetPage(page))\n    setPage(page)\n  }\n\n  const handleOnPageChange = async (e : any, page : number) => {\n    if (!editable || currentAnswer === null) {\n      goToPage(page)\n      return\n    }\n    if (currentAnswer !== null) await sendReply(page)\n  }\n\n  const handleFinish = async (e : any) => {\n    await sendReply(1)\n    handleStop()\n  }\n\n  const renderQuestion = (page : number) => {\n    const question = currentTest.test?.questions[page-1] as BaseQuestion\n    if (!question) return\n\n    switch(currentTest.test?.testType) {\n      case TestType.OptionWordToVideo:\n      case TestType.OptionWordToVideo_Error:\n        return (\n          <QuestionOptionWordToVideo setCurrentAnswer={setCurrentAnswer} question={question as QuestionOptionWordToVideoModel} editable={editable} />\n        )\n      case TestType.OptionVideoToWord:\n      case TestType.OptionVideoToWord_Error:\n        return (\n          <QuestionOptionVideoToWord setCurrentAnswer={setCurrentAnswer} question={question as QuestionOptionVideoToWordModel} editable={editable} />\n        )\n      case TestType.Mimic:\n      case TestType.Mimic_Error:\n        return (\n          <QuestionMimic setCurrentAnswer={setCurrentAnswer} question={question as QuestionMimicModel} editable={editable} />\n        )\n      case TestType.QA:\n      case TestType.QA_Error:\n        return (\n          <QuestionQA setCurrentAnswer={setCurrentAnswer} question={question as QuestionQAModel} editable={editable} />\n        )\n    }\n  }\n\n  return (\n    <>\n      <Pagination \n        page={page}\n        onChange={handleOnPageChange}\n        count={currentTest.test?.questions.length}\n        renderItem={ (item) => \n          <PaginationItem \n            {...item}\n          />\n        } \n      />\n\n      <Typography sx={{ marginTop: 3 }} ref={handleRefTitle} variant='h3' component='h1'>\n        { testTypeToString(currentTest.test?.testType as TestType) }\n      </Typography>\n\n      <Box ref={handleRefInfo} sx={{ marginTop: 3, minWidth: 300, display: 'flex', flexDirection: 'row', justifyContent: 'space-between', width: '100%', alignItems: 'center'}}>\n        <Chip \n          label={ currentTest.test?.difficulty as Difficulty } \n          color={difficultyToColor(currentTest.test?.difficulty as Difficulty)} \n          />\n        { !editable &&\n          <>\n            <Button variant=\"outlined\" startIcon={<InfoIcon />} onClick={ handleOpenModal }>\n              Show test results\n            </Button>\n\n            <ResultsModal open={open} onClose={handleCloseModal} test={currentTest.test} /> \n          </>\n        }\n      </Box>\n      \n      <Divider sx={{ marginTop: 3, marginBottom: 3, width: '80%' }} variant=\"middle\" />\n\n      { renderQuestion(page) }\n\n      <NavButtons \n        editable={editable}\n        page={page} \n        handleOnPageChange={handleOnPageChange} \n        testLength={currentTest.test?.questions.length} \n        handleStop={handleStop} \n        handleFinish={handleFinish}\n        loading={isLoading}\n      />\n    </>\n  )\n}\n","import { Box, Container } from '@mui/material'\nimport { TestComponent } from '../../../components/test/Test'\n\nexport const TestDoScreen = () => {\n  return (\n    <Container component='main'>\n      <Box\n          sx={{\n              marginTop: 3,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n          }}\n      >\n        <TestComponent editable={true} />\n      </Box>\n    </Container>\n  )\n}\n","import { Box, Container } from '@mui/material'\nimport { TestComponent } from '../../../components/test/Test'\n\nexport const TestReviewScreen = () => {\n  return (\n    <Container component='main'>\n      <Box\n          sx={{\n              marginTop: 3,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n          }}\n      >\n        <TestComponent editable={false} />\n      </Box>\n    </Container>\n  )\n}\n","\nexport const NotFoundScreen = () => {\n  return (\n    <div>404Screen</div>\n  )\n}\n","import { Routes, Route, Navigate } from 'react-router-dom'\nimport { AuthAlert } from '../components/alert'\nimport { useAppSelector } from '../redux/hooks'\nimport { \n    ConfirmEmailScreen, \n    LoginScreen, \n    ChangePasswordScreen, \n    RegisterScreen \n} from '../screens'\n\nexport const AuthRoutes = () => {\n\n    const { errors, messages } = useAppSelector(state => state.auth)\n\n    return (\n        <>\n            <Routes>\n                <Route path=\"login\" element={<LoginScreen />} />\n                <Route path=\"register\" element={<RegisterScreen />} />\n                <Route path=\"email-confirmation/:email/:token\" element={<ConfirmEmailScreen />} />\n                <Route path=\"password-recovery/:email/:token\" element={<ChangePasswordScreen />} />\n\n                <Route path=\"*\" element={<Navigate to=\"login\" />} />\n            </Routes>\n\n            {\n                errors.map((error, index) => (\n                    <AuthAlert \n                        key={index}\n                        message={error}\n                        type='error'\n                        position={{horizontal: 'center', vertical: 'bottom'}}\n                    /> \n                ))\n            }\n\n            {\n                messages.info.map((info, index) => (\n                    <AuthAlert \n                        key={index}\n                        message={info}\n                        type={'info'}\n                        position={{horizontal: 'center', vertical: 'bottom'}}\n                    /> \n                ))\n            }\n\n            {\n                messages.success.map((suc, index) => (\n                    <AuthAlert \n                        key={index}\n                        message={suc}\n                        type={'success'}\n                        position={{horizontal: 'center', vertical: 'bottom'}}\n                    /> \n                ))\n            }\n        </>\n        \n    )\n}","import { BottomNavigation, BottomNavigationAction } from '@mui/material'\nimport { Link } from 'react-router-dom'\nimport ShowChartIcon from '@mui/icons-material/ShowChart'\nimport HomeIcon from '@mui/icons-material/Home'\nimport QuizIcon from '@mui/icons-material/Quiz'\nimport PersonIcon from '@mui/icons-material/Person'\n\ninterface BottomBarNavProps {\n    onChange?: (event: React.SyntheticEvent, value: any) => void,\n    value?: any\n}\nexport const BottomBarNav = ({value, onChange}: BottomBarNavProps) => {\n  return (\n    <BottomNavigation value={value} onChange={onChange} showLabels>\n        <BottomNavigationAction \n            component={Link}\n            to='/'\n            value='/'\n            label='Home' \n            icon={<HomeIcon />} \n        />\n        <BottomNavigationAction \n            label='Start'\n            component={Link}\n            to='/test/new'\n            value='/test/new'\n            icon={<QuizIcon />} \n        />\n        <BottomNavigationAction \n            label='Stats' \n            component={Link}\n            to='/stats'\n            value='/stats'\n            icon={<ShowChartIcon />} \n        />\n        <BottomNavigationAction \n            label='Profile' \n            component={Link}\n            to='/profile'\n            value='/profile'\n            icon={<PersonIcon />} \n        />\n    </BottomNavigation>\n  )\n}\n","import { useState } from 'react'\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks'\nimport { useNavigate } from 'react-router-dom'\nimport { \n    AppBar as AppBarMui, \n    Container,\n    Box,\n    Toolbar, \n    Typography, \n    Tooltip, \n    IconButton, \n    Avatar, \n    Menu,\n    MenuItem,\n    ListItemIcon,\n    ListItemText\n} from '@mui/material'\nimport LogoutIcon from '@mui/icons-material/Logout'\nimport KeyboardReturnIcon from '@mui/icons-material/KeyboardReturn'\nimport { thunkLogout } from '../../redux/auth/authSlice'\nimport { thunkDeleteCurrentTest } from '../../redux/test/testSlice'\n\ninterface AppBarProps {\n    isGoBackVisible: boolean,\n    sx?: any\n}\n\nexport const AppBar = ({isGoBackVisible, sx} : AppBarProps) => {\n    const navigate = useNavigate()\n    const { email } = useAppSelector(state => state.auth.user)\n    const [anchorElUser, setAnchorElUser] = useState<null | HTMLElement>(null)\n    const dispatch = useAppDispatch()\n\n    const handleOpenUserMenu = (event: React.MouseEvent<HTMLElement>) => {\n        setAnchorElUser(event.currentTarget) \n    }\n\n    const handleCloseUserMenu = () => {\n        setAnchorElUser(null) \n    } \n\n    const handleLogout = () => {\n        dispatch(thunkLogout())\n    }\n\n    const handleGoBack = () => {\n        dispatch(thunkDeleteCurrentTest())\n        navigate(-1)\n    }\n\n    return (\n        <AppBarMui position='sticky' sx={sx} >\n            <Container maxWidth='xl'>\n                <Toolbar disableGutters>\n                    {\n                        isGoBackVisible && \n                        (\n                            <IconButton\n                                size=\"large\"\n                                edge=\"start\"\n                                color=\"inherit\"\n                                aria-label=\"menu\"\n                                sx={{ mr: 2 }}\n                                onClick={handleGoBack}\n                            >\n                                <KeyboardReturnIcon />\n                            </IconButton>\n                        )\n                    }\n                    <Typography\n                        variant='h6'\n                        noWrap\n                        component='div'\n                        sx={{ flexGrow: 1 }}\n                    >\n                        Learn ASL\n                    </Typography>\n                    <Box sx={{ flexGrow: 0 }}>\n                        <Tooltip title='Pofile settings' onClick={handleOpenUserMenu}>\n                            <IconButton sx={{ p: 0 }}>\n                                <Avatar>\n                                    { email.charAt(0).toLocaleUpperCase() }\n                                </Avatar>\n                            </IconButton>\n                        </Tooltip>\n\n                        <Menu\n                            sx={{ mt: '45px' }}\n                            anchorEl={anchorElUser}\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <MenuItem onClick={handleLogout}>\n                                <ListItemIcon>\n                                    <LogoutIcon/>\n                                </ListItemIcon>\n                                <ListItemText>Logout</ListItemText>\n                            </MenuItem>\n                        </Menu>\n                    </Box>\n                </Toolbar>\n            </Container>\n        </AppBarMui>\n    )\n}\n","import { useRef, useState, useEffect } from 'react'\nimport { Routes, Route, Navigate, useLocation } from 'react-router-dom'\nimport { Box, CssBaseline, Paper } from '@mui/material'\n\nimport { \n    HomeScreen,\n    NotFoundScreen,\n    ProfileScreen,\n    StatsScreen,\n    TestCreateScreen,\n    TestDoScreen,\n    TestReviewScreen\n} from '../screens'\nimport { BottomBarNav } from '../components/nav/BottomBarNav'\nimport { AppBar } from '../components/appbar/AppBar'\nimport { useAppSelector } from '../redux/hooks'\nimport { DashboardAlert } from '../components/alert'\n\nconst routesWithoutBottomBar : RegExp[] = [\n    /\\/test\\/do\\/.+/,\n    /\\/test\\/review\\/.+/,\n]\n\nexport const DashboardRoutes = () => {\n    const location = useLocation()\n    const { errors, messages } = useAppSelector(state => state.dashboard)\n    const ref = useRef<HTMLDivElement>(null)\n    const pathname = window.location.pathname\n    const [value, setValue] = useState(pathname)\n    const [isBottomBarVisible, setIsBottomBarVisible] = useState(true)\n    const [isGoBackVisible, setIsGoBackVisible] = useState(true)\n\n    useEffect(() => {\n        let isRouteWithoutBottomBar = false\n        routesWithoutBottomBar.forEach(route => {\n            if (location.pathname.match(route)) {\n                isRouteWithoutBottomBar = true\n            }\n        })\n\n        setIsBottomBarVisible(!isRouteWithoutBottomBar)\n        setIsGoBackVisible(isRouteWithoutBottomBar)\n    }, [location.pathname])\n\n    const handleChange = (_ : React.SyntheticEvent, newValue : any) => {\n      setValue(newValue)\n    }\n\n    return (\n        <>\n            <Box sx={{ pb: 7 }} ref={ref}>\n                <AppBar isGoBackVisible={isGoBackVisible} sx={{ marginBottom: '10px' }} />\n                \n                <CssBaseline />\n                <Routes>\n                    <Route path='' element={<HomeScreen />} />\n                    <Route path='profile' element={<ProfileScreen />} />\n                    <Route path='test/new' element={<TestCreateScreen />} />\n                    <Route path='stats' element={<StatsScreen />} />\n                    <Route path='404' element={<NotFoundScreen />} />\n\n                    <Route path='test/do/:id' element={<TestDoScreen />} />\n                    <Route path='test/review/:id' element={<TestReviewScreen />} />\n\n                    <Route path='*' element={<Navigate to='404' />} />\n                </Routes>\n\n                {\n                    isBottomBarVisible && (\n                        <Paper sx={{ position: 'fixed', bottom: 0, left: 0, right: 0 }} elevation={3}>\n                            <BottomBarNav value={value} onChange={handleChange}/>\n                        </Paper>\n                    )\n                }\n            </Box>\n\n            {\n                errors.map((error, index) => (\n                    <DashboardAlert \n                        key={index}\n                        message={error}\n                        type='error'\n                        position={{horizontal: 'center', vertical: 'bottom'}}\n                    /> \n                ))\n            }\n\n            {\n                messages.info.map((info, index) => (\n                    <DashboardAlert \n                        key={index}\n                        message={info}\n                        type={'info'}\n                        position={{horizontal: 'center', vertical: 'bottom'}}\n                    /> \n                ))\n            }\n        </>\n    )\n}","import { Routes, Route, BrowserRouter } from 'react-router-dom'\nimport { PrivateRoute } from './PrivateRoute'\nimport { PublicRoute } from './PublicRoute'\nimport { AuthRoutes } from './AuthRoutes'\nimport { DashboardRoutes } from './DashboardRoutes'\n\nexport const AppRouter = () => {\n    return (\n        <BrowserRouter>\n            <Routes>\n                <Route \n                    path='/auth/*'\n                    element={\n                        <PublicRoute>\n                            <AuthRoutes />\n                        </PublicRoute>\n                    }\n                />\n\n                <Route \n                    path='/*' \n                    element={\n                        <PrivateRoute>\n                            <DashboardRoutes />\n                        </PrivateRoute>\n                    }\n                />\n            </Routes>\n        </BrowserRouter>\n    )\n}","import { createTheme, CssBaseline, ThemeProvider } from '@mui/material'\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\nimport { AppRouter } from './routers/AppRouter'\n\nconst theme = createTheme()\n\nconst LearnASLApp = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <Provider store={store}>\n                <AppRouter />\n            </Provider>\n        </ThemeProvider>\n    )\n}\n\nexport default LearnASLApp","import ReactDOM from 'react-dom'\nimport LearnASLApp from './LearnASLApp'\n\nReactDOM.render(\n  <LearnASLApp />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}